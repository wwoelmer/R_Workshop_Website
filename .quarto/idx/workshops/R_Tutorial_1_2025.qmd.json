{"title":"Lesson 1 - Fundamentals of R","markdown":{"yaml":{"title":"Lesson 1 - Fundamentals of R","author":"Whitney Woelmer","format":{"html":{"toc":true,"number-sections":true}}},"headingText":"Set CRAN mirror in R code","containsRefs":false,"markdown":"\n```{r setup, include = FALSE}\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n```\n\n## Overview\n\nThis introductory lesson is designed to teach you the fundamentals of using RStudio to analyze environmental data. First we will learn how to install packages.\n\n### Installing packages\nPackages provide new functions that can help us do specific actions in R. These will become increasingly useful as you learn more about R!\n\nThe main packages that we will use in this tutorial are:\n\n* __tidyverse__\n* __readxl__\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n  * __\"New Zealand [https] - University of Auckland\"__  \n  \nTo check this, click 'Tools' --> 'Global Options' --> 'Packages'.  Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on  the 'Install' button on the 'packages' tab in the lower right window pane.  Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr). \n\nYou can also install packages directly using code.\n```{r, message=FALSE}\ninstall.packages('tidyverse') # typically, R needs things to be in quotes, \n# either '' or \"\" if it is not a recognized object in the environment\ninstall.packages('readxl') \n```\n\n\nOnce all of these packages are installed you can load them using the 'library' function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\nYou can check if you have loaded your package by clicking on the ‘Packages’ tab, \nand navigate to the package name you just loaded. There should be a check next\nto it if it has been loaded properly. If you don't see the package at all,\nthat means it has not been installed.\n\n### Creating objects\nOne of the main ways that you will interact with R is to create and re-use objects. Let's just creating a few objects ourselves. We did this for an in-person workshop where we counted the number of participants and instructors. However, you can change the code whatever you like! If you're alone, maybe try changing it to the number of doorknobs and windows in your room.\n\n```{r, message=FALSE}\nnum_participants <- 13# insert number of people in the room\n  \nnum_instructors <- 3# insert number of instructors in the room\n  \nparticipant_instructor_ratio <- num_participants/num_instructors\n```\n\n\nVoila! You've created new objects! You should now see the objects in the upper right of your RStudio, in the Environment window.\n\n### Read in data, understand data classes, plot data, create new column\nYou can read in many different file formats into R and each will use their own function (e.g., read.csv, read.table, read_excel). To read in a file, you need to tell R where the file is located, relative to your working directory. To check where R is looking for your files, we will run the following function:\n\n```{r}\ngetwd()\n```\n\nRunning `getwd()` tells you *where* your working directory is located. Since we \nare using a project, your working directory will be where you put your project \non your computer. If you don't use a project, you will need to set a \nworking directory using `setwd()`. However, I DO NOT recommend setting working \ndirectories for reproducibility reasons. If someone else wanted to run my code,\nthey won't have a `C:/Users/wwoelmer/Desktop/uni_files/` folder and will have to\nre-write the code to their own local directory...this causes lots of headaches.\nProjects are the best way to organize your files. But see other resources about \nthis if desired: https://rpubs.com/em_/wdInR\n\nNow let's read in our water quality data\n\n```{r}\nwq <- read.csv('./data/BoP_WQ_formatted.csv') # HINT: hit 'tab' as you're typin the directory to see a list of files in this directory\n```\n\nThe ./ notation means: look in the working directory (that is what the period represents),\nthen in the folder data, then look for a file called BoP_WQ_formatted.csv\n\nNow that we've read in our data, it's best practice to look at it and see if everything looks alright.\n```{r}\nView(wq) # this opens up the dataframe to view, \n# you can also do this by clicking on your dataframe ('wq') in the Environment at right\n```\n\n### Dataframe structure\nNow that we've read in our data, let's look at its structure. \n\n```{r}\nstr(wq)\n```\n\nRunning the `str` function tells us the structure of each column in the dataframe. Now that we've looked at the structure of the `wq` dataframe, this shows us that\nthe first three columns are of the character (chr) class, including `wq$date` \nBut R has a specific data class for dates so we need to tell R that this is a date\n\n```{r}\nwq$date <- as.Date(wq$date)\n```\n\nAnother formal class in R is a POSIXct object, which include date and time.\nBecause datetimes are often in UTC, we will use as.POSIXct() to specify the \ntime zone and ensure the right date\n\nIn this case, we will create a new column called 'datetime' which store both date\nand time zone ETC/GMT+12\n\n```{r}\nwq$datetime <- as.POSIXct(wq$date, tz = \"ETC/GMT+12\")\n```\n\nNow that we've set the `date` column as class date and created a new column of class\nPOSIXct, let's look at the structure again\n\n```{r}\nstr(wq)\n```\n\nAnother data class we may want to use is 'factor'. In `wq`, lake is listed as a character\nwhich means the different values have no particular order, and will appear alphabetically.\n\nLet's say we wanted to order them by increasing maximum depth.\n\n```{r}\nwq$lake <- factor(wq$lake, levels = c('Rotoehu', 'Rerewhakaaitu', 'Okaro',\n                                      'Tikitapu', 'Rotokakahi', 'Okareka',\n                                      'Rotorua', 'Okataina', 'Rotoma',\n                                      'Tarawera', 'Rotoiti', 'Rotomahana'))\n```\n\n___\n***Challenge 1:*** *What is the structure of `wq` now that you have updated the lake column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nstr(wq)\n\n# This shows that the lake column is now a factor!\n\n```\n</details>\n\n___\n\n### Plotting data\nNow let's plot the `wq` data using the `ggplot` system. `ggplot` requires a \ndataframe (here, `wq`), and then the aesthetics or `aes()`. This tells it what \nto put on the x-axis and the y-axis. We have also told it to color the points \nbased on the column `site`.\n\n```{r}\nggplot(wq, aes(x = as.Date(date), y = DRP_mgm3_top, color = site)) + \n  geom_point() + # this tells R how to \"map\" the data: in this case, use points\n  facet_wrap(~lake, scales = 'free') + # this makes a different panel for each lake, where the scale of both axes are different for each lake\n  theme_bw() # this sets a 'theme' for how the plot looks, this is the 'black and white' setting\n```\n\n___\n***Challenge 2:*** *Create a different plot with `chla_mgm3_top` on the y-axis.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(wq, aes(x = as.Date(date), y = chla_mgm3_top, color = site)) + \n  geom_point() + # this tells R how to \"map\" the data: in this case, use points\n  facet_wrap(~lake, scales = 'free') + # this makes a different panel for each lake, where the scale of both axes are different for each lake\n  theme_bw() # this sets a 'theme' for how the plot looks, this is the 'black and white' setting\n\n```\n</details>\n\n___\n\n## Subset data, plot data, calculate summary statistics, write a csv\n\nWe are now going to learn to subset data. Here, let's subset the `wq` dataframe\nto select just one lake, I'll pick Rotoehu. Below is an example of subsetting\nusing the base functions in R\n\n```{r}\nrotoehu <- wq[wq$lake=='Rotoehu',] # the == means: look for an exact match\n  # this uses the base R notation of subset via brackets and indexing [rows, columns]\n  # here, we are saying take the dataframe wq\n  # then in brackets, we subset. here, we are saying keep only the rows where \n  # column 'lake' equals 'Rotoehu'. then we have a comma, and nothing after it,\n  # which means keep all of the columns\n```\n\n\nA more intuitive way to subset dataframe is to use the `tidyverse` function `filter()`\n\n```{r}\nrotoehu <- wq %>%  # this symbol is called a pipe, you can read it as 'whereby'\n  filter(lake=='Rotoehu') # here we say filter out every row where the lake column\n                          # equals 'Rotoehu' (remember R is sensitive to capitals)\n```\n\nUsing our subsetted dataframe `rotoehu`, let's plot the data using ggplot. We can also clean up our axis labels a bit using the functions `xlab` and `ylab`.\n\n```{r}\nggplot(rotoehu, aes(x = as.Date(date), y = chla_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Chl-a (mg/m3)')\n```\n\n\n___\n***Challenge 3:*** *Modify the ggplot code above to plot TN_mgm3_top in the `rotoehu` dataframe. Make sure your axis labels are accurate.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nggplot(rotoehu, aes(x = as.Date(date), y = TN_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Total Nitrogen (mg/m3)')\n```\n</details>\n\n___\n\n### Writing a .csv file\nNow let's save this subsetted data as a new csv file. First, we will bring up the \nhelp documentation for the function `write.csv()` so we can see what information\n(called arguments) the function needs us to input\n\n```{r, eval = FALSE}\n?write.csv # bring up the help documentation\n```\n\nBased on the help documentation, we can see there are lots of arguments, but most\nof them have defaults. The information that R needs to know includes `x`, which is\nthe object we are exporting (in this case, the dataframe `rotoehu`), `file` which\ncorresponds to the the location where we want to save the file (in this case,\nwe will save it in the `data` folder and called the file `rotoehu_wq.csv`), \nand we want to set the argument `row.names = FALSE` so that the file isn't written with\nan extra column naming the rows\n\n```{r, eval = FALSE}\nwrite.csv(rotoehu, # this is the object we want to export\n          file = './data/rotoehu_wq.csv',  # the . means go from the working directory, \n          row.names = FALSE) # which is our project directory (check getwd() to clarify)\n                             # then we are writing inside the 'data' folder\n                             # and can call the file whatever we want, with the \n                             # .csv extension. here, I've named it 'rotoehu_wq_2000_2021.csv\n                             # the row.names should be set as FALSE\n                             # to avoid having an extra column in the csv file which lists the row number\n```\n\n### Calculating summary statistics\nNow that we've subset our data, let's calculate some summary statistics and save \nthem as a new object\n\n```{r}\nmean_chl <- mean(rotoehu$chla_mgm3_top)\nprint(mean_chl) #### hm that says NA, which means we need to remove the NA's before we take the mean\n```\n\n\nHmmm that says the `mean_chl` is `NA`. Look at the `rotoehu` dataframe: are all the\nchla values NA? No...which means there must be some NA's in there which have thrown\nR off. We need to remove the NA's before we take the mean. Look at help \ndocumentation (?mean) and read about the `na.rm` argument. We need to add the \nargument na.rm, then rerun the mean calculation\n\n___\n***Challenge 4:*** *Use the `na.rm` argument within the `mean` function to calculate the mean chl-a in Lake Rotoehu.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nmean_chl <- mean(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(mean_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 5:*** *You're on a roll! Not calculate the standard deviation using the function `sd()`. Don't forget to use the `na.rm` function.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nsd_chl <- sd(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(sd_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 6:*** *Lastly, calculate the minimum and maximum values of chl-a in Lake Rotoehu.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nmin_chl <- min(rotoehu$chla_mgm3_top, na.rm = TRUE)\nmax_chl <- max(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(min_chl)\nprint(max_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 7:*** *To wrap up this section, let's have a big challenge where you repeat this excercise but for Lake Rotoma DRP instead. Remember that you need to 1) subset the original `wq` dataframe using either indexing or filter(), 2) plot the surface (top) DRP data for Lake Rotoma, 3) calculate the mean, sd, minimum, and maximum of DRP.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nrotoma <- wq %>% \n  filter(lake=='Rotoma')\n\nggplot(rotoma, aes(x = as.Date(date), y = DRP_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Dissolved Reactive Phosporus at surface (mg/m3)')\n\nmean(rotoma$DRP_mgm3_top, na.rm = TRUE)\nsd(rotoma$DRP_mgm3_top, na.rm = TRUE)\nmin(rotoma$DRP_mgm3_top, na.rm = TRUE)\nmax(rotoma$DRP_mgm3_top, na.rm = TRUE)\n```\n</details>\n\n___\n\n","srcMarkdownNoYaml":"\n```{r setup, include = FALSE}\n# Set CRAN mirror in R code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n```\n\n## Overview\n\nThis introductory lesson is designed to teach you the fundamentals of using RStudio to analyze environmental data. First we will learn how to install packages.\n\n### Installing packages\nPackages provide new functions that can help us do specific actions in R. These will become increasingly useful as you learn more about R!\n\nThe main packages that we will use in this tutorial are:\n\n* __tidyverse__\n* __readxl__\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n  * __\"New Zealand [https] - University of Auckland\"__  \n  \nTo check this, click 'Tools' --> 'Global Options' --> 'Packages'.  Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on  the 'Install' button on the 'packages' tab in the lower right window pane.  Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr). \n\nYou can also install packages directly using code.\n```{r, message=FALSE}\ninstall.packages('tidyverse') # typically, R needs things to be in quotes, \n# either '' or \"\" if it is not a recognized object in the environment\ninstall.packages('readxl') \n```\n\n\nOnce all of these packages are installed you can load them using the 'library' function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\nYou can check if you have loaded your package by clicking on the ‘Packages’ tab, \nand navigate to the package name you just loaded. There should be a check next\nto it if it has been loaded properly. If you don't see the package at all,\nthat means it has not been installed.\n\n### Creating objects\nOne of the main ways that you will interact with R is to create and re-use objects. Let's just creating a few objects ourselves. We did this for an in-person workshop where we counted the number of participants and instructors. However, you can change the code whatever you like! If you're alone, maybe try changing it to the number of doorknobs and windows in your room.\n\n```{r, message=FALSE}\nnum_participants <- 13# insert number of people in the room\n  \nnum_instructors <- 3# insert number of instructors in the room\n  \nparticipant_instructor_ratio <- num_participants/num_instructors\n```\n\n\nVoila! You've created new objects! You should now see the objects in the upper right of your RStudio, in the Environment window.\n\n### Read in data, understand data classes, plot data, create new column\nYou can read in many different file formats into R and each will use their own function (e.g., read.csv, read.table, read_excel). To read in a file, you need to tell R where the file is located, relative to your working directory. To check where R is looking for your files, we will run the following function:\n\n```{r}\ngetwd()\n```\n\nRunning `getwd()` tells you *where* your working directory is located. Since we \nare using a project, your working directory will be where you put your project \non your computer. If you don't use a project, you will need to set a \nworking directory using `setwd()`. However, I DO NOT recommend setting working \ndirectories for reproducibility reasons. If someone else wanted to run my code,\nthey won't have a `C:/Users/wwoelmer/Desktop/uni_files/` folder and will have to\nre-write the code to their own local directory...this causes lots of headaches.\nProjects are the best way to organize your files. But see other resources about \nthis if desired: https://rpubs.com/em_/wdInR\n\nNow let's read in our water quality data\n\n```{r}\nwq <- read.csv('./data/BoP_WQ_formatted.csv') # HINT: hit 'tab' as you're typin the directory to see a list of files in this directory\n```\n\nThe ./ notation means: look in the working directory (that is what the period represents),\nthen in the folder data, then look for a file called BoP_WQ_formatted.csv\n\nNow that we've read in our data, it's best practice to look at it and see if everything looks alright.\n```{r}\nView(wq) # this opens up the dataframe to view, \n# you can also do this by clicking on your dataframe ('wq') in the Environment at right\n```\n\n### Dataframe structure\nNow that we've read in our data, let's look at its structure. \n\n```{r}\nstr(wq)\n```\n\nRunning the `str` function tells us the structure of each column in the dataframe. Now that we've looked at the structure of the `wq` dataframe, this shows us that\nthe first three columns are of the character (chr) class, including `wq$date` \nBut R has a specific data class for dates so we need to tell R that this is a date\n\n```{r}\nwq$date <- as.Date(wq$date)\n```\n\nAnother formal class in R is a POSIXct object, which include date and time.\nBecause datetimes are often in UTC, we will use as.POSIXct() to specify the \ntime zone and ensure the right date\n\nIn this case, we will create a new column called 'datetime' which store both date\nand time zone ETC/GMT+12\n\n```{r}\nwq$datetime <- as.POSIXct(wq$date, tz = \"ETC/GMT+12\")\n```\n\nNow that we've set the `date` column as class date and created a new column of class\nPOSIXct, let's look at the structure again\n\n```{r}\nstr(wq)\n```\n\nAnother data class we may want to use is 'factor'. In `wq`, lake is listed as a character\nwhich means the different values have no particular order, and will appear alphabetically.\n\nLet's say we wanted to order them by increasing maximum depth.\n\n```{r}\nwq$lake <- factor(wq$lake, levels = c('Rotoehu', 'Rerewhakaaitu', 'Okaro',\n                                      'Tikitapu', 'Rotokakahi', 'Okareka',\n                                      'Rotorua', 'Okataina', 'Rotoma',\n                                      'Tarawera', 'Rotoiti', 'Rotomahana'))\n```\n\n___\n***Challenge 1:*** *What is the structure of `wq` now that you have updated the lake column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nstr(wq)\n\n# This shows that the lake column is now a factor!\n\n```\n</details>\n\n___\n\n### Plotting data\nNow let's plot the `wq` data using the `ggplot` system. `ggplot` requires a \ndataframe (here, `wq`), and then the aesthetics or `aes()`. This tells it what \nto put on the x-axis and the y-axis. We have also told it to color the points \nbased on the column `site`.\n\n```{r}\nggplot(wq, aes(x = as.Date(date), y = DRP_mgm3_top, color = site)) + \n  geom_point() + # this tells R how to \"map\" the data: in this case, use points\n  facet_wrap(~lake, scales = 'free') + # this makes a different panel for each lake, where the scale of both axes are different for each lake\n  theme_bw() # this sets a 'theme' for how the plot looks, this is the 'black and white' setting\n```\n\n___\n***Challenge 2:*** *Create a different plot with `chla_mgm3_top` on the y-axis.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(wq, aes(x = as.Date(date), y = chla_mgm3_top, color = site)) + \n  geom_point() + # this tells R how to \"map\" the data: in this case, use points\n  facet_wrap(~lake, scales = 'free') + # this makes a different panel for each lake, where the scale of both axes are different for each lake\n  theme_bw() # this sets a 'theme' for how the plot looks, this is the 'black and white' setting\n\n```\n</details>\n\n___\n\n## Subset data, plot data, calculate summary statistics, write a csv\n\nWe are now going to learn to subset data. Here, let's subset the `wq` dataframe\nto select just one lake, I'll pick Rotoehu. Below is an example of subsetting\nusing the base functions in R\n\n```{r}\nrotoehu <- wq[wq$lake=='Rotoehu',] # the == means: look for an exact match\n  # this uses the base R notation of subset via brackets and indexing [rows, columns]\n  # here, we are saying take the dataframe wq\n  # then in brackets, we subset. here, we are saying keep only the rows where \n  # column 'lake' equals 'Rotoehu'. then we have a comma, and nothing after it,\n  # which means keep all of the columns\n```\n\n\nA more intuitive way to subset dataframe is to use the `tidyverse` function `filter()`\n\n```{r}\nrotoehu <- wq %>%  # this symbol is called a pipe, you can read it as 'whereby'\n  filter(lake=='Rotoehu') # here we say filter out every row where the lake column\n                          # equals 'Rotoehu' (remember R is sensitive to capitals)\n```\n\nUsing our subsetted dataframe `rotoehu`, let's plot the data using ggplot. We can also clean up our axis labels a bit using the functions `xlab` and `ylab`.\n\n```{r}\nggplot(rotoehu, aes(x = as.Date(date), y = chla_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Chl-a (mg/m3)')\n```\n\n\n___\n***Challenge 3:*** *Modify the ggplot code above to plot TN_mgm3_top in the `rotoehu` dataframe. Make sure your axis labels are accurate.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nggplot(rotoehu, aes(x = as.Date(date), y = TN_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Total Nitrogen (mg/m3)')\n```\n</details>\n\n___\n\n### Writing a .csv file\nNow let's save this subsetted data as a new csv file. First, we will bring up the \nhelp documentation for the function `write.csv()` so we can see what information\n(called arguments) the function needs us to input\n\n```{r, eval = FALSE}\n?write.csv # bring up the help documentation\n```\n\nBased on the help documentation, we can see there are lots of arguments, but most\nof them have defaults. The information that R needs to know includes `x`, which is\nthe object we are exporting (in this case, the dataframe `rotoehu`), `file` which\ncorresponds to the the location where we want to save the file (in this case,\nwe will save it in the `data` folder and called the file `rotoehu_wq.csv`), \nand we want to set the argument `row.names = FALSE` so that the file isn't written with\nan extra column naming the rows\n\n```{r, eval = FALSE}\nwrite.csv(rotoehu, # this is the object we want to export\n          file = './data/rotoehu_wq.csv',  # the . means go from the working directory, \n          row.names = FALSE) # which is our project directory (check getwd() to clarify)\n                             # then we are writing inside the 'data' folder\n                             # and can call the file whatever we want, with the \n                             # .csv extension. here, I've named it 'rotoehu_wq_2000_2021.csv\n                             # the row.names should be set as FALSE\n                             # to avoid having an extra column in the csv file which lists the row number\n```\n\n### Calculating summary statistics\nNow that we've subset our data, let's calculate some summary statistics and save \nthem as a new object\n\n```{r}\nmean_chl <- mean(rotoehu$chla_mgm3_top)\nprint(mean_chl) #### hm that says NA, which means we need to remove the NA's before we take the mean\n```\n\n\nHmmm that says the `mean_chl` is `NA`. Look at the `rotoehu` dataframe: are all the\nchla values NA? No...which means there must be some NA's in there which have thrown\nR off. We need to remove the NA's before we take the mean. Look at help \ndocumentation (?mean) and read about the `na.rm` argument. We need to add the \nargument na.rm, then rerun the mean calculation\n\n___\n***Challenge 4:*** *Use the `na.rm` argument within the `mean` function to calculate the mean chl-a in Lake Rotoehu.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nmean_chl <- mean(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(mean_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 5:*** *You're on a roll! Not calculate the standard deviation using the function `sd()`. Don't forget to use the `na.rm` function.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nsd_chl <- sd(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(sd_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 6:*** *Lastly, calculate the minimum and maximum values of chl-a in Lake Rotoehu.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nmin_chl <- min(rotoehu$chla_mgm3_top, na.rm = TRUE)\nmax_chl <- max(rotoehu$chla_mgm3_top, na.rm = TRUE)\nprint(min_chl)\nprint(max_chl)\n```\n</details>\n\n___\n\n\n___\n***Challenge 7:*** *To wrap up this section, let's have a big challenge where you repeat this excercise but for Lake Rotoma DRP instead. Remember that you need to 1) subset the original `wq` dataframe using either indexing or filter(), 2) plot the surface (top) DRP data for Lake Rotoma, 3) calculate the mean, sd, minimum, and maximum of DRP.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nrotoma <- wq %>% \n  filter(lake=='Rotoma')\n\nggplot(rotoma, aes(x = as.Date(date), y = DRP_mgm3_top)) + \n  geom_point() +\n  theme_bw() +\n  xlab('Date') +\n  ylab('Dissolved Reactive Phosporus at surface (mg/m3)')\n\nmean(rotoma$DRP_mgm3_top, na.rm = TRUE)\nsd(rotoma$DRP_mgm3_top, na.rm = TRUE)\nmin(rotoma$DRP_mgm3_top, na.rm = TRUE)\nmax(rotoma$DRP_mgm3_top, na.rm = TRUE)\n```\n</details>\n\n___\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"number-sections":true,"output-file":"R_Tutorial_1_2025.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","output-dir":"../docs","editor":"visual","theme":"sandstone","title":"Lesson 1 - Fundamentals of R","author":"Whitney Woelmer"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}