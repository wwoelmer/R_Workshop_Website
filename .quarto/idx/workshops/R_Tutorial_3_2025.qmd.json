{"title":"Lesson 3 - Manipulating and plotting time series data in R","markdown":{"yaml":{"title":"Lesson 3 - Manipulating and plotting time series data in R","format":{"html":{"toc":true,"number-sections":true}}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nThis lesson is designed to provide you with experience in manipulating and plotting time series data.\n\nThe main packages that we will use in this tutorial are:\n\n* __tidyverse__\n* __lubridate__\n* __BoPRC2025__\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n  * __\"New Zealand [https] - University of Auckland\"__  \n  \nTo check this, click 'Tools' --> 'Global Options' --> 'Packages'.  Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on  the 'Install' button on the 'packages' tab in the lower right window pane.  Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr). \n\n\nOnce all of these packages are installed you can load them using the 'library' function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(BoPRC2025) \n```\n\n\nFirst we will load in our data. This data has been downloaded from Aquarius using the R script which you can find at `scripts/download_data_aquarius.R` if you'd like to see how the data were downloaded. For today, we are skipping that step and reading in directly from a .csv file which was written after the Aquarius download.\n```{r, message=FALSE}\nwq <- read.csv('./data/Lake_WQ_Timeseries.csv')\n```\n\nNow, look at the `wq` dataframe by clicking on it in the environment and familiarise yourself with the columns. There is a lot of metadata here, but let's select just a few which we want to work with, using the `select` function\n\n```{r, message=FALSE}\nwq <- wq %>% \n  select(LocationName:Value, Parameter, Unit) # list the columns you want to keep, you can use, e.g. col1:col3 to select a range of columns\n```\n\nOne of the columns that we have selected is the `Time` column, which includes both a date and a time. It is always best practice is to format date/time objects with the appropriate timezone, otherwise R will assume a timezone, and that can lead to the wrong date being set for your timestamp. Here, we will use a function called `parse_date_time` which looks at the `Time` column, and then provides a list (using `c()`) of potential formats that the column will be in. Here, we list two formats, the first one has YMD and HMS (hours, minutes, seconds), the second one just has YMD, as some of the values in the `Time` column don't have an associated time next to the date. We pair this with the `mutate` function, which we will learn more about below.\n\nNOTE: there are many ways to format/parse dates and times in R. This is just one example!\n```{r, message=FALSE}\nwq <- wq %>% mutate(Time = parse_date_time(Time,c(\"%Y-%m-%d %H:%M:%S\",\"%Y-%m-%d\"), tz = \"etc/GMT+12\"))\n\n```\n\n___\n***Challenge 1:*** *What is the structure of `wq` now that you have updated the Time column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nstr(wq)\n\n# This shows that the Time column is now a POSIXct object\n\n```\n</details>\n\n___\n\n\nUsing the `unique` function, let's see what lakes which are included in this dataset.\n```{r, message=FALSE}\nunique(wq$LocationName)\n```\n\n___\n***Challenge 2:*** *Using the same `unique` function, what water quality variables are included in this dataset, in the `Parameter` column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nunique(wq$Parameter)\n\n# This shows we have total nitrogen, total phosphorus, chlorophyll-a, and Secchi depth\n\n```\n</details>\n\n___\n\nThe names of the parameters have spaces and symbols in them which can be annoying to work with in R. Let's clean that up. We will use a function called `recode` which can be used to change the name of a value in a column. Here, we are saying take the `wq` dataframe, and mutate the column `Parameter` such that the values of `Parameter` which currently equal \"TN (g/m^3)\", will be rewritten as \"TN_gm3\". We will also do this for TP here.\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = recode(Parameter, \"TN (g/m^3)\" = \"TN_gm3\"),\n         Parameter = recode(Parameter, \"TP (g/m^3)\" = \"TP_gm3\"))\n\n```\nAs with anything in R, there are multiple ways to rename entries within a column like we have just done. We will rename the TN and TP values in the `Parameter` column using the `case_when` function so you can learn another method. Sometimes one method may be more intuitive to you than another.\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = case_when(  # create a new `Parameter` column based on a set of conditions\n    Parameter == \"TN (g/m^3)\" ~ \"TN_gm3\", # first condition: if the value of Parameter is \"TN (g/m^3)\", change it to \"TN_gm3\"\n    Parameter == \"TP (g/m^3)\" ~ \"TP_gm3\", # same but for TP\n    TRUE ~ Parameter)) # for any other cases, keep the original values of Parameter\n\n# provide case_when example\n```\n\n___\n***Challenge 3:*** *We have done this for TN and TP. Now try using the same method to rename chlorophyll-a and Secchi depth using either `recode` or `case_when`. Make sure to name the new columns `chla_mgm3` and `secchi_m` (we will use these same names later in the code so they will need to match!)*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = recode(Parameter, \"CHLA (mg/m^3)\" = \"chla_mgm3\"),\n         Parameter = recode(Parameter, \"VC - SD (m)\" = \"secchi_m\"))\n\n```\n</details>\n___\n\nNow let's make a plot of our data, using the `facet_wrap` function to display the different parameters\n```{r message=FALSE,tidy=TRUE}\nggplot(wq, aes(x = as.Date(Time), y = Value, color = LocationName)) +\n  geom_point() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw()\n\n# the scales = 'free' in the facet_wrap() function allows the x and y-axes to vary by each panel\n```\n\n### the `pivot_wider` function\nLet's say we're interested in a plot of chl-a, but we want to color it based on the Secchi depth in that lake. Our dataset is in long format, so in order to do this, we need to make it into wide format (e.g., instead of Parameters as a column, TN, TP, chla, and Secchi will be their own columns, with the values in that column). We will use the `pivot_wider` function to do this, where you give the function the name of the column where the new columns will come from (here `names_from = 'Parameter'`), and the name of the column where the actual numbers will come from (here `values_from = 'Value'`)\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide <- wq %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\n```\nThat threw some warnings, so let's look at the dataframe and see if everything looks ok. When we open up `wq_wide`, we see there are a lot of \"NULL\" values for the different columns--that doesn't look right. That is because our `Time` column is very specific, and includes not just dates but times which are not common across all the parameters. The time components isn't really important in this case. We also have the `Unit` column, which is not the same across parameters and is causing an issue. Let's create a `Date` column, remove `Time` and `Unit`, and try making the dataframe wide again\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide <- wq %>% \n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\n```\nHmm, that still throws a warning. If we look at `wq_wide` again, we see that there are some columns which have two values in them (e.g., Lake Rotoma on 2015-01-20 has two entries for TP). To fix this, let's take the average on a given day for a given lake if there is more than one reading. We will need to introduce a couple of new functions to accomplish this.\n\n### The `group_by` and `summarise` functions\n`group_by` is a `tidyverse` function which allows you to do calculations by different groups (e.g., the LocationName column). It is usually paired with another function which does the calculation. For example, `summarise` is another `tidyverse` function which, as it sounds, summarises by a given function. I often use this to take the mean, minimum, or some other summary statistic. This function results in a shorter dataframe, because you've summarised the values by your grouping factors. We will pair `group_by` with `summarise` to create summary statistics for each lake.\n\n```{r message=FALSE}\n\nwq_wide <- wq %>% \n  mutate(Date = as.Date(Time)) %>% # keeping these lines in our workflow to remove Time and Unit\n  select(-Time, -Unit) %>% \n  group_by(LocationName, Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value') # then we pivot wider\n\n```\n\nViola! No warnings and our dataframe looks good (make sure you look at it)!! Ok, now let's make a plot of chl-a over time, but colored in by Secchi (our original goal before all that data manipulation...)\n\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide %>% \n  filter(!is.na(secchi_m)) %>% # some values have NA for secchi so we will remove those\n  ggplot(aes(x = as.Date(Date), y = chla_mgm3, color = secchi_m)) +\n  geom_point() +\n  facet_wrap(~LocationName) +\n  scale_color_distiller(palette = 'YlGnBu', direction = 2) +\n  theme_bw() +\n  scale_y_log10() # this log-transforms the y axis and makes it easier to see the variability across sites\n\n# scale_color_distiller changes the color scheme,  you can google scale_color_distiller to find out other palettes you can use, direction = 2 just changes whether the scales goes from blue to yellow with blue as high or low, in this case, we want blue to be high. try changing direction = 1 and see what happens\n\n```\n___\n\n***Challenge 4a:*** *Now that we've used `pivot_wider`, try to use pivot_longer to turn your dataframe back into longer format*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nwq_long <- wq_wide %>% \n  pivot_longer(TN_gm3:secchi_m, names_to = 'Parameter', values_to = 'Value')\n\n# first you specify which columns are getting pivot-ted longer, we can use the colon : to say all the columns between TN and secchi\n\n# being able to pivot between wide and long format is really helpful for different types of analyses and plotting!\n```\n</details>\n___\n\n\n___\n\n***Challenge 4b:*** *Now that you've made your wq_long dataframe, try making a plot with Date on the x-axis, Value on the y-axis, color by LocationName, and facet_wrap by Parameter. Use `geom_line` instead of `geom_point`*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nggplot(wq_long, aes(x = as.Date(Date), y = Value, color = LocationName)) +\n  geom_line() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  scale_y_log10()\n```\n</details>\n___\n\n### Calculating annual means\n\nWe've now plotted the full time series but we want to get a more summarised overview of the water quality across the lakes, so we will calculate some summary statistics. Let's calculate the annual means for each variable and lake. First we need to create a new column which represents the year. We will use the function `year` in the `lubridate` package\n\n```{r message=FALSE, tidy=TRUE}\nwq_summary <- wq %>% \n  mutate(year = year(Time)) %>% \n  group_by(LocationName, Parameter, year) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE))\n        \n```\n\nOften, we actually need to calculate annual averages by the hydroyear, instead of the year. To do this, let's use the `Bathing_Season` function in the `BoPRC2025` package, which calculates the hydroyear.\n```{r message=FALSE, tidy=TRUE}\nwq_summary <- wq %>% \n  #mutate(year = year(Time)) %>% \n  mutate(hydroyear = Bathing_Season(Time)) %>% \n  group_by(LocationName, Parameter, hydroyear) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE))\n        \n```\n\nView the wq_summary dataframe and familiarise yourself with it. Let's plot the chl-a data to visualize it a bit more clearly.\n\n```{r message=FALSE, tidy=TRUE}\nwq_summary %>% \n  filter(Parameter=='chla_mgm3') %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point() +\n  facet_wrap(~LocationName, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1))  +\n  ylab('Mean Chl-a (mgm/m3)')\n\n        \n```\n\n___\n\n***Challenge 5:*** *That's a lot of lakes to wrap your head around. For this challenge, create a plot for just Lake Rotorua at Site 2, and facet by Parameter*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_summary %>% \n  filter(LocationName==\"Lake Rotorua at Site 2 (Integrated)\") %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point(size = 2) +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) # this rotates the x-axis label since the LocationNames are long\n\n```\n</details>\n___\n\n\nWe can also add the standard deviation as error bars using `geom_errorbar`.\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_summary %>% \n  filter(LocationName==\"Lake Rotorua at Site 2 (Integrated)\") %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2)) +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) # this rotates the x-axis label since the LocationNames are long\n\n```\n\nHowever, we know there is strong seasonal variability. Let's look at seasonal means instead of overall\n\n### The `mutate` and `case_when` functions\n\nThe `mutate` function creates an entirely new column in our dataframe. This works similarly to `summarise` which we used above, except instead of summarising into a smaller dataframe, we use `mutate` across all our data and maintain the same number of rows. In order to do seasonal means, we need to first create a season identifier. We will pair `mutate` with `case_when` which you used earlier. This function chains together multiple `ifelse` statements. Essentially, it allows you to perform a multiple conditional operations which says if(this condition), then do X, if not, do Y. Here, we are saying if the month of our time column is 12, 1, 2, make the new column 'season' = 'summer', and so on for the other month combination. The last argument `TRUE ~ NA_character_` says, if none of the conditions are met, assign it as NA.\n\n```{r message=FALSE, tidy=TRUE}\n# go back to our original wq dataframe, not the summarised one and add a new column: season\nwq <- wq %>% \n  mutate(season = case_when(\n    month(Time) %in% c(12, 1, 2)  ~ \"summer\",\n    month(Time) %in% c(3, 4, 5)   ~ \"autumn\",\n    month(Time) %in% c(6, 7, 8)   ~ \"winter\",\n    month(Time) %in% c(9, 10, 11) ~ \"spring\",\n    TRUE                          ~ NA_character_ )) # default case, if needed\n\n\n\n```\n\nLet's plot the range of values across each season\n\n```{r message=FALSE, tidy=TRUE}\n\nggplot(wq, aes(x = season, y = Value)) +\n  geom_boxplot() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  scale_y_log10()\n\n\n```\n\n\n***Challenge 6:*** *It's nice to see the boxplots, but we want the actual numbers for median, min, max, etc.. Calculate summary statistics for each lake, season, and parameter. HINT: We will bring back our friends `group_by` and `summarise` for this.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_season_summary <- wq %>% \n  group_by(LocationName, season, Parameter) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE),\n            perc_95 = quantile(Value, 0.95))\n\n# Open up your dataframe and see if all looks good. There should be one value for each season, lake, and parameter\n```\n</details>\n___\n\n### BONUS: plotting annual means again NPSFM bands\nWe have a dataframe with the ranges of the NPSFM bands for each variable. We will need to read this in, merge together with our `wq_summary` dataframe, which has the annual median values for each variable. Then we will plot the data. But first we will have to do a little data manipulating...\n\n```{r message=FALSE,tidy=TRUE}\n# read in  bands\nbands <- read.csv('./data/NPSFM_bands.csv')\n# we want to join `bands` with the `wq` dataframe, but the column name for `Parameter` is called `variable`. We will rename this so it matches with `wq`\n\nbands <- bands %>% \n  rename(Parameter = variable)\n\n```\nThe values of TN and TP in `bands$Parameter` are in mg/m3, whereas in `wq_summary` they are in g/m3. We need to first convert TN and TP in `wq_summary` into mg/m3 before we can merge the two dataframes together.\n\n```{r message=FALSE,tidy=TRUE}\nwq_summary <- wq_summary %>% \n  select(LocationName, Parameter, hydroyear, median) %>% # select the columns we need\n  mutate(median = ifelse(Parameter %in% c('TN_gm3', 'TP_gm3'), median*1000, median),\n         Parameter = recode(Parameter, \n                            'TN_gm3' = 'TN_mgm3',\n                            'TP_gm3' = 'TP_mgm3'))\nprint(unique(wq_summary$Parameter))\n```\nNow that we have the columns in both of the dataframes `wq_summary` and `bands` set up properly, we can combine the two dataframes using the function `left_join`. This is another tidyverse function that merges two dataframes based on one or more common columns. It will keep all the rows from the first (left) dataframe and add any matching information in the second (right) dataframe. Here the matching columns is `Parameter`\n\n```{r message=FALSE,tidy=TRUE}\n\nnof <- left_join(wq_summary, bands, by = 'Parameter')\n\n```\nThis gives us a warning that there are \"many-to-many relationships between x and y.\" Sometimes this warning means that there is something wrong with your dataframe merge, but in this case, this is actually ok. It is telling us that in `bands` there are multiple matches for a single value of `Parameter` in `wq_summary`. That is because there are four values of `bands$band` (a, b, c, and d) which correspond to a single row in `wq_summary`. This has resulted in our new dataframe `nof` being much longer than the original `wq_summary` but that is expected behavior so we can ignore this warning.\n\nNow that we have our matching dataframe, we need to create maximum and minimum x values for which the color shading will be mapped onto our plot. These simply need to correspond to maximum and minimum years of our dataframe\n```{r message=FALSE,tidy=TRUE}\nnof <- nof %>% \n  group_by(Parameter) %>% \n  mutate(x_max = max(hydroyear),\n         x_min = min(hydroyear))\n\n\n```\n\nIf we look at `nof` again, we should have a minimum and maximum column for both x and y. We will use these in our plotting by adding a layer using `geom_rect` to map the colors of the different bands behind our points\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(nof, aes(x = hydroyear, y = median, color = as.factor(LocationName))) +\n  geom_rect(aes(xmin = x_min,\n                xmax = x_max,\n                ymin = y_min,\n                ymax = y_max,\n                fill = band,\n                alpha = 0.2),\n            color = NA) +\n  geom_point(size = 2) +\n  scale_fill_manual(values = c('#00A2E1FF', '#62BD19FF', '#FFC726FF', '#FF671FFF')) +\n  facet_wrap(~Parameter, scales = 'free') +\n  labs(color = 'Site') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) +\n  scale_y_log10()\n\n```\n\n\n\n\n***Challenge 7:*** *Secchi depth is not currently assessed as part of the NPSFM. Let's remove it from our plot using the `filter` function:*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nnof %>% \n  filter(Parameter!='secchi_m') %>% \nggplot(aes(x = hydroyear, y = median, color = as.factor(LocationName))) +\n  geom_rect(aes(xmin = x_min,\n                xmax = x_max,\n                ymin = y_min,\n                ymax = y_max,\n                fill = band),\n            color = NA) +\n  geom_point(size = 2) +\n  scale_fill_manual(values = c('#00A2E1FF', '#62BD19FF', '#FFC726FF', '#FF671FFF')) +\n  facet_wrap(~Parameter, scales = 'free', nrow = 2) +\n  labs(color = 'Site') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) +\n  scale_y_log10()\n\n\n\n```\n</details>\n___","srcMarkdownNoYaml":"\n\n## Overview\n\nThis lesson is designed to provide you with experience in manipulating and plotting time series data.\n\nThe main packages that we will use in this tutorial are:\n\n* __tidyverse__\n* __lubridate__\n* __BoPRC2025__\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n  * __\"New Zealand [https] - University of Auckland\"__  \n  \nTo check this, click 'Tools' --> 'Global Options' --> 'Packages'.  Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on  the 'Install' button on the 'packages' tab in the lower right window pane.  Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr). \n\n\nOnce all of these packages are installed you can load them using the 'library' function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(BoPRC2025) \n```\n\n\nFirst we will load in our data. This data has been downloaded from Aquarius using the R script which you can find at `scripts/download_data_aquarius.R` if you'd like to see how the data were downloaded. For today, we are skipping that step and reading in directly from a .csv file which was written after the Aquarius download.\n```{r, message=FALSE}\nwq <- read.csv('./data/Lake_WQ_Timeseries.csv')\n```\n\nNow, look at the `wq` dataframe by clicking on it in the environment and familiarise yourself with the columns. There is a lot of metadata here, but let's select just a few which we want to work with, using the `select` function\n\n```{r, message=FALSE}\nwq <- wq %>% \n  select(LocationName:Value, Parameter, Unit) # list the columns you want to keep, you can use, e.g. col1:col3 to select a range of columns\n```\n\nOne of the columns that we have selected is the `Time` column, which includes both a date and a time. It is always best practice is to format date/time objects with the appropriate timezone, otherwise R will assume a timezone, and that can lead to the wrong date being set for your timestamp. Here, we will use a function called `parse_date_time` which looks at the `Time` column, and then provides a list (using `c()`) of potential formats that the column will be in. Here, we list two formats, the first one has YMD and HMS (hours, minutes, seconds), the second one just has YMD, as some of the values in the `Time` column don't have an associated time next to the date. We pair this with the `mutate` function, which we will learn more about below.\n\nNOTE: there are many ways to format/parse dates and times in R. This is just one example!\n```{r, message=FALSE}\nwq <- wq %>% mutate(Time = parse_date_time(Time,c(\"%Y-%m-%d %H:%M:%S\",\"%Y-%m-%d\"), tz = \"etc/GMT+12\"))\n\n```\n\n___\n***Challenge 1:*** *What is the structure of `wq` now that you have updated the Time column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nstr(wq)\n\n# This shows that the Time column is now a POSIXct object\n\n```\n</details>\n\n___\n\n\nUsing the `unique` function, let's see what lakes which are included in this dataset.\n```{r, message=FALSE}\nunique(wq$LocationName)\n```\n\n___\n***Challenge 2:*** *Using the same `unique` function, what water quality variables are included in this dataset, in the `Parameter` column?*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nunique(wq$Parameter)\n\n# This shows we have total nitrogen, total phosphorus, chlorophyll-a, and Secchi depth\n\n```\n</details>\n\n___\n\nThe names of the parameters have spaces and symbols in them which can be annoying to work with in R. Let's clean that up. We will use a function called `recode` which can be used to change the name of a value in a column. Here, we are saying take the `wq` dataframe, and mutate the column `Parameter` such that the values of `Parameter` which currently equal \"TN (g/m^3)\", will be rewritten as \"TN_gm3\". We will also do this for TP here.\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = recode(Parameter, \"TN (g/m^3)\" = \"TN_gm3\"),\n         Parameter = recode(Parameter, \"TP (g/m^3)\" = \"TP_gm3\"))\n\n```\nAs with anything in R, there are multiple ways to rename entries within a column like we have just done. We will rename the TN and TP values in the `Parameter` column using the `case_when` function so you can learn another method. Sometimes one method may be more intuitive to you than another.\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = case_when(  # create a new `Parameter` column based on a set of conditions\n    Parameter == \"TN (g/m^3)\" ~ \"TN_gm3\", # first condition: if the value of Parameter is \"TN (g/m^3)\", change it to \"TN_gm3\"\n    Parameter == \"TP (g/m^3)\" ~ \"TP_gm3\", # same but for TP\n    TRUE ~ Parameter)) # for any other cases, keep the original values of Parameter\n\n# provide case_when example\n```\n\n___\n***Challenge 3:*** *We have done this for TN and TP. Now try using the same method to rename chlorophyll-a and Secchi depth using either `recode` or `case_when`. Make sure to name the new columns `chla_mgm3` and `secchi_m` (we will use these same names later in the code so they will need to match!)*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nwq <- wq %>% \n  mutate(Parameter = recode(Parameter, \"CHLA (mg/m^3)\" = \"chla_mgm3\"),\n         Parameter = recode(Parameter, \"VC - SD (m)\" = \"secchi_m\"))\n\n```\n</details>\n___\n\nNow let's make a plot of our data, using the `facet_wrap` function to display the different parameters\n```{r message=FALSE,tidy=TRUE}\nggplot(wq, aes(x = as.Date(Time), y = Value, color = LocationName)) +\n  geom_point() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw()\n\n# the scales = 'free' in the facet_wrap() function allows the x and y-axes to vary by each panel\n```\n\n### the `pivot_wider` function\nLet's say we're interested in a plot of chl-a, but we want to color it based on the Secchi depth in that lake. Our dataset is in long format, so in order to do this, we need to make it into wide format (e.g., instead of Parameters as a column, TN, TP, chla, and Secchi will be their own columns, with the values in that column). We will use the `pivot_wider` function to do this, where you give the function the name of the column where the new columns will come from (here `names_from = 'Parameter'`), and the name of the column where the actual numbers will come from (here `values_from = 'Value'`)\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide <- wq %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\n```\nThat threw some warnings, so let's look at the dataframe and see if everything looks ok. When we open up `wq_wide`, we see there are a lot of \"NULL\" values for the different columns--that doesn't look right. That is because our `Time` column is very specific, and includes not just dates but times which are not common across all the parameters. The time components isn't really important in this case. We also have the `Unit` column, which is not the same across parameters and is causing an issue. Let's create a `Date` column, remove `Time` and `Unit`, and try making the dataframe wide again\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide <- wq %>% \n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\n```\nHmm, that still throws a warning. If we look at `wq_wide` again, we see that there are some columns which have two values in them (e.g., Lake Rotoma on 2015-01-20 has two entries for TP). To fix this, let's take the average on a given day for a given lake if there is more than one reading. We will need to introduce a couple of new functions to accomplish this.\n\n### The `group_by` and `summarise` functions\n`group_by` is a `tidyverse` function which allows you to do calculations by different groups (e.g., the LocationName column). It is usually paired with another function which does the calculation. For example, `summarise` is another `tidyverse` function which, as it sounds, summarises by a given function. I often use this to take the mean, minimum, or some other summary statistic. This function results in a shorter dataframe, because you've summarised the values by your grouping factors. We will pair `group_by` with `summarise` to create summary statistics for each lake.\n\n```{r message=FALSE}\n\nwq_wide <- wq %>% \n  mutate(Date = as.Date(Time)) %>% # keeping these lines in our workflow to remove Time and Unit\n  select(-Time, -Unit) %>% \n  group_by(LocationName, Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value') # then we pivot wider\n\n```\n\nViola! No warnings and our dataframe looks good (make sure you look at it)!! Ok, now let's make a plot of chl-a over time, but colored in by Secchi (our original goal before all that data manipulation...)\n\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_wide %>% \n  filter(!is.na(secchi_m)) %>% # some values have NA for secchi so we will remove those\n  ggplot(aes(x = as.Date(Date), y = chla_mgm3, color = secchi_m)) +\n  geom_point() +\n  facet_wrap(~LocationName) +\n  scale_color_distiller(palette = 'YlGnBu', direction = 2) +\n  theme_bw() +\n  scale_y_log10() # this log-transforms the y axis and makes it easier to see the variability across sites\n\n# scale_color_distiller changes the color scheme,  you can google scale_color_distiller to find out other palettes you can use, direction = 2 just changes whether the scales goes from blue to yellow with blue as high or low, in this case, we want blue to be high. try changing direction = 1 and see what happens\n\n```\n___\n\n***Challenge 4a:*** *Now that we've used `pivot_wider`, try to use pivot_longer to turn your dataframe back into longer format*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nwq_long <- wq_wide %>% \n  pivot_longer(TN_gm3:secchi_m, names_to = 'Parameter', values_to = 'Value')\n\n# first you specify which columns are getting pivot-ted longer, we can use the colon : to say all the columns between TN and secchi\n\n# being able to pivot between wide and long format is really helpful for different types of analyses and plotting!\n```\n</details>\n___\n\n\n___\n\n***Challenge 4b:*** *Now that you've made your wq_long dataframe, try making a plot with Date on the x-axis, Value on the y-axis, color by LocationName, and facet_wrap by Parameter. Use `geom_line` instead of `geom_point`*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nggplot(wq_long, aes(x = as.Date(Date), y = Value, color = LocationName)) +\n  geom_line() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  scale_y_log10()\n```\n</details>\n___\n\n### Calculating annual means\n\nWe've now plotted the full time series but we want to get a more summarised overview of the water quality across the lakes, so we will calculate some summary statistics. Let's calculate the annual means for each variable and lake. First we need to create a new column which represents the year. We will use the function `year` in the `lubridate` package\n\n```{r message=FALSE, tidy=TRUE}\nwq_summary <- wq %>% \n  mutate(year = year(Time)) %>% \n  group_by(LocationName, Parameter, year) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE))\n        \n```\n\nOften, we actually need to calculate annual averages by the hydroyear, instead of the year. To do this, let's use the `Bathing_Season` function in the `BoPRC2025` package, which calculates the hydroyear.\n```{r message=FALSE, tidy=TRUE}\nwq_summary <- wq %>% \n  #mutate(year = year(Time)) %>% \n  mutate(hydroyear = Bathing_Season(Time)) %>% \n  group_by(LocationName, Parameter, hydroyear) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE))\n        \n```\n\nView the wq_summary dataframe and familiarise yourself with it. Let's plot the chl-a data to visualize it a bit more clearly.\n\n```{r message=FALSE, tidy=TRUE}\nwq_summary %>% \n  filter(Parameter=='chla_mgm3') %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point() +\n  facet_wrap(~LocationName, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1))  +\n  ylab('Mean Chl-a (mgm/m3)')\n\n        \n```\n\n___\n\n***Challenge 5:*** *That's a lot of lakes to wrap your head around. For this challenge, create a plot for just Lake Rotorua at Site 2, and facet by Parameter*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_summary %>% \n  filter(LocationName==\"Lake Rotorua at Site 2 (Integrated)\") %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point(size = 2) +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) # this rotates the x-axis label since the LocationNames are long\n\n```\n</details>\n___\n\n\nWe can also add the standard deviation as error bars using `geom_errorbar`.\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_summary %>% \n  filter(LocationName==\"Lake Rotorua at Site 2 (Integrated)\") %>% # only plot TN\n  ggplot(aes(x = hydroyear, y = mean)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd, width = 0.2)) +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) # this rotates the x-axis label since the LocationNames are long\n\n```\n\nHowever, we know there is strong seasonal variability. Let's look at seasonal means instead of overall\n\n### The `mutate` and `case_when` functions\n\nThe `mutate` function creates an entirely new column in our dataframe. This works similarly to `summarise` which we used above, except instead of summarising into a smaller dataframe, we use `mutate` across all our data and maintain the same number of rows. In order to do seasonal means, we need to first create a season identifier. We will pair `mutate` with `case_when` which you used earlier. This function chains together multiple `ifelse` statements. Essentially, it allows you to perform a multiple conditional operations which says if(this condition), then do X, if not, do Y. Here, we are saying if the month of our time column is 12, 1, 2, make the new column 'season' = 'summer', and so on for the other month combination. The last argument `TRUE ~ NA_character_` says, if none of the conditions are met, assign it as NA.\n\n```{r message=FALSE, tidy=TRUE}\n# go back to our original wq dataframe, not the summarised one and add a new column: season\nwq <- wq %>% \n  mutate(season = case_when(\n    month(Time) %in% c(12, 1, 2)  ~ \"summer\",\n    month(Time) %in% c(3, 4, 5)   ~ \"autumn\",\n    month(Time) %in% c(6, 7, 8)   ~ \"winter\",\n    month(Time) %in% c(9, 10, 11) ~ \"spring\",\n    TRUE                          ~ NA_character_ )) # default case, if needed\n\n\n\n```\n\nLet's plot the range of values across each season\n\n```{r message=FALSE, tidy=TRUE}\n\nggplot(wq, aes(x = season, y = Value)) +\n  geom_boxplot() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  scale_y_log10()\n\n\n```\n\n\n***Challenge 6:*** *It's nice to see the boxplots, but we want the actual numbers for median, min, max, etc.. Calculate summary statistics for each lake, season, and parameter. HINT: We will bring back our friends `group_by` and `summarise` for this.*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_season_summary <- wq %>% \n  group_by(LocationName, season, Parameter) %>% \n  summarise(mean = mean(Value, na.rm = TRUE),\n            median = median(Value, na.rm = TRUE),\n            min = min(Value, na.rm = TRUE),\n            max = max(Value, na.rm = TRUE),\n            sd = sd(Value, na.rm = TRUE),\n            perc_95 = quantile(Value, 0.95))\n\n# Open up your dataframe and see if all looks good. There should be one value for each season, lake, and parameter\n```\n</details>\n___\n\n### BONUS: plotting annual means again NPSFM bands\nWe have a dataframe with the ranges of the NPSFM bands for each variable. We will need to read this in, merge together with our `wq_summary` dataframe, which has the annual median values for each variable. Then we will plot the data. But first we will have to do a little data manipulating...\n\n```{r message=FALSE,tidy=TRUE}\n# read in  bands\nbands <- read.csv('./data/NPSFM_bands.csv')\n# we want to join `bands` with the `wq` dataframe, but the column name for `Parameter` is called `variable`. We will rename this so it matches with `wq`\n\nbands <- bands %>% \n  rename(Parameter = variable)\n\n```\nThe values of TN and TP in `bands$Parameter` are in mg/m3, whereas in `wq_summary` they are in g/m3. We need to first convert TN and TP in `wq_summary` into mg/m3 before we can merge the two dataframes together.\n\n```{r message=FALSE,tidy=TRUE}\nwq_summary <- wq_summary %>% \n  select(LocationName, Parameter, hydroyear, median) %>% # select the columns we need\n  mutate(median = ifelse(Parameter %in% c('TN_gm3', 'TP_gm3'), median*1000, median),\n         Parameter = recode(Parameter, \n                            'TN_gm3' = 'TN_mgm3',\n                            'TP_gm3' = 'TP_mgm3'))\nprint(unique(wq_summary$Parameter))\n```\nNow that we have the columns in both of the dataframes `wq_summary` and `bands` set up properly, we can combine the two dataframes using the function `left_join`. This is another tidyverse function that merges two dataframes based on one or more common columns. It will keep all the rows from the first (left) dataframe and add any matching information in the second (right) dataframe. Here the matching columns is `Parameter`\n\n```{r message=FALSE,tidy=TRUE}\n\nnof <- left_join(wq_summary, bands, by = 'Parameter')\n\n```\nThis gives us a warning that there are \"many-to-many relationships between x and y.\" Sometimes this warning means that there is something wrong with your dataframe merge, but in this case, this is actually ok. It is telling us that in `bands` there are multiple matches for a single value of `Parameter` in `wq_summary`. That is because there are four values of `bands$band` (a, b, c, and d) which correspond to a single row in `wq_summary`. This has resulted in our new dataframe `nof` being much longer than the original `wq_summary` but that is expected behavior so we can ignore this warning.\n\nNow that we have our matching dataframe, we need to create maximum and minimum x values for which the color shading will be mapped onto our plot. These simply need to correspond to maximum and minimum years of our dataframe\n```{r message=FALSE,tidy=TRUE}\nnof <- nof %>% \n  group_by(Parameter) %>% \n  mutate(x_max = max(hydroyear),\n         x_min = min(hydroyear))\n\n\n```\n\nIf we look at `nof` again, we should have a minimum and maximum column for both x and y. We will use these in our plotting by adding a layer using `geom_rect` to map the colors of the different bands behind our points\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(nof, aes(x = hydroyear, y = median, color = as.factor(LocationName))) +\n  geom_rect(aes(xmin = x_min,\n                xmax = x_max,\n                ymin = y_min,\n                ymax = y_max,\n                fill = band,\n                alpha = 0.2),\n            color = NA) +\n  geom_point(size = 2) +\n  scale_fill_manual(values = c('#00A2E1FF', '#62BD19FF', '#FFC726FF', '#FF671FFF')) +\n  facet_wrap(~Parameter, scales = 'free') +\n  labs(color = 'Site') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) +\n  scale_y_log10()\n\n```\n\n\n\n\n***Challenge 7:*** *Secchi depth is not currently assessed as part of the NPSFM. Let's remove it from our plot using the `filter` function:*\n\n<details>\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nnof %>% \n  filter(Parameter!='secchi_m') %>% \nggplot(aes(x = hydroyear, y = median, color = as.factor(LocationName))) +\n  geom_rect(aes(xmin = x_min,\n                xmax = x_max,\n                ymin = y_min,\n                ymax = y_max,\n                fill = band),\n            color = NA) +\n  geom_point(size = 2) +\n  scale_fill_manual(values = c('#00A2E1FF', '#62BD19FF', '#FFC726FF', '#FF671FFF')) +\n  facet_wrap(~Parameter, scales = 'free', nrow = 2) +\n  labs(color = 'Site') +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 75, hjust = 1)) +\n  scale_y_log10()\n\n\n\n```\n</details>\n___"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"number-sections":true,"output-file":"R_Tutorial_3_2025.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","theme":"sandstone","title":"Lesson 3 - Manipulating and plotting time series data in R"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}