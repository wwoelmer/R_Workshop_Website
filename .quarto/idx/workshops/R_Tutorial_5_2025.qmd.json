{"title":"BOPRC R Tutorial 5 - Statistical Analyses in R","markdown":{"yaml":{"title":"BOPRC R Tutorial 5 - Statistical Analyses in R","author":"Whitney Woelmer","format":{"html":{"toc":true,"number-sections":true}}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nThis lesson is designed to provide you with experience in running statistical analyses in R. We will use water quality data as an example, but these analyses can be applied to many other datasets, provided the statistical assumptions are met. We will cover the following topics:\n\n-   Correlation analyses (Pearson and Spearman) and plots\n-   Linear regression and plots\n-   T-tests and Wilcoxon rank sum test (aka Mann-Whitney)\n-   ANOVA\n\n::: callout-note\n**Disclaimer**\n\nThis lesson teaches the implementation of multiple statistical analyses, rather than the background behind why, when, and what to check when choosing a statistical analysis. You should always check the underlying assumptions of an analysis and whether your data meet those assumptions.\n:::\n\nWe are adding a few new packages today which perform specialized functions for statistical analyses. You don't need to worry about the new packages too much, other than you will need to install and load the libraries.\n\nThe main packages that we will use in this tutorial are:\n\n-   **tidyverse**\n-   **lubridate**\n-   **Hmisc**\n-   **corrplot**\n-   **ggpmisc**\n-   **ggpubr**\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n-   **\"New Zealand \\[https\\] - University of Auckland\"**\n\nTo check this, click 'Tools' --\\> 'Global Options' --\\> 'Packages'. Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on the 'Install' button on the 'packages' tab in the lower right window pane. Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr).\n\nOnce all of these packages are installed you can load them using the `library` function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(Hmisc)\nlibrary(corrplot)\nlibrary(ggpmisc)\nlibrary(ggpubr)\n```\n\nFirst we will load in our data. We will use the same water quality data from Lesson 3. This data has been downloaded from Aquarius using the R script which you can find at `scripts/download_data_aquarius.R` if you'd like to see how the data were downloaded. For today, we are skipping that step and reading in directly from a .csv file which was written after the Aquarius download.\n\n```{r, message=FALSE}\nwq <- read.csv('./data/Lake_WQ_Timeseries.csv')\n```\n\nNow, look at the `wq` dataframe by clicking on it in the environment and familiarise yourself with the columns. You can also run the function `colnames(wq)` in the console to get a list of column names. It's better to run this in the console (rather than in your script editor), since it is a diagnostic test and not something you will necessary need to run every time you open your script--just as needed.\n\n```{r, message=FALSE}\ncolnames(wq) # you don't have to save this in your script, but can copy it into the console\n```\n\nAs we know from previous lessons, it is always best practice is to format date/time objects with the appropriate timezone, otherwise R will assume a timezone, and that can lead to the wrong date being set for your timestamp. This is the first thing I do when I see I have a datetime object as a column. Let's use a bit of code that will parse our `Time` column, which includes both a date and a time.\n\nHere, we will use a function called `parse_date_time` which looks at the `Time` column, and then provides a list (using `c()`) of potential formats that the column will be in. Here, we list two formats, the first one has YMD and HMS (hours, minutes, seconds), the second one just has YMD, as some of the values in the `Time` column don't have an associated time next to the date. We pair this with the `mutate` function to re-write our `Time` column.\n\nNOTE: there are many ways to format/parse dates and times in R. This is just one example!\n\n```{r, message=FALSE}\nwq <- wq %>% mutate(Time = parse_date_time(Time,c(\"%Y-%m-%d %H:%M:%S\",\"%Y-%m-%d\"), tz = \"etc/GMT+12\"))\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 1:*** *What locations and parameters are included in this dataset? Use the `unique()` function to find out.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nunique(wq$Parameter)\nunique(wq$LocationName)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nThat helps us get a better understanding of the dataset that we're working with and is something I will do often while working in R to remind myself.\n\nSince we are going to do correlation analysis first, let's focus on just one site and look at the relationships between variables in the `Parameter` column. We will filter the data to only select \"Lake Okaro at Site 1 (Integrated)\" and we will create a new dataframe named `wq_okaro` so we keep all the other lake data in the `wq` dataframe.\n\n```{r, message=FALSE}\nwq_okaro <- wq %>% \n  filter(LocationName=='Lake Okaro at Site 1 (Integrated)')\n```\n\nLet's also clean up the dataframe and only select the columns which are useful to us right now\n\n```{r, message=FALSE}\nwq_okaro <- wq_okaro %>% \n  select(Time, Value, Parameter, Unit)\n```\n\nLet's plot the data to make sure everything looks good. I like to do a `geom_point` plot, as well as a histogram, using `geom_histogram`\n\n```{r, message=FALSE}\nggplot(wq_okaro, aes(x = as.POSIXct(Time), y = Value, color = Parameter)) +\n  geom_point() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  xlab('Time')\n\nggplot(wq_okaro, aes(x = Value, fill = Parameter)) +\n  geom_histogram() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw()\n\n\n```\n\nAlright, we have a time series of four variables. There are many things we can do to analyse this data. Let's start with a correlation analysis.\n\n# Correlation analysis and plots\n\nA correlation analysis is used to assess the magnitude and direction of the relationship between two variables. It does not necessarily imply casuation, but shows you how two variables change together.\n\nWe will use the function `rcorr` and `corrplot` to create and visualize our correlation analysis. In order to conduct a correlation analysis, we need to do some formatting/rearranging. First, we need to make the data wide, but we also have to create a `Date` column which doesn't include the time so that it is common across the variables. We will also remove the `Unit` column for this reason (and we don't need that column for this anyway since the units are stored in the Parameter names)\n\n```{r, message=FALSE}\nokaro_wide <- wq_okaro %>% \n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value') %>% \n  ungroup()\n\n```\n\nOpen up your new `okaro_wide` data and check it out. Those column names have gaps and symbols in them, which might cause us problems later. Let's rename the columns using the function `rename`. I'll show you one example\n\n```{r, message=FALSE}\nokaro_wide <- okaro_wide %>% \n  rename('chla_mgm3' = \"CHLA (mg/m^3)\") # the format is new name = old name\n```\n\n------------------------------------------------------------------------\n\n***Challenge 2:*** *Rename the remaining variable columns to TN_gm3, TP_gm3, and secchi_m.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nokaro_wide <- okaro_wide %>% \n  rename('TN_gm3' = \"TN (g/m^3)\",\n         \"TP_gm3\" = \"TP (g/m^3)\",\n         \"secchi_m\" = \"VC - SD (m)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nGreat, your `okaro_wide` dataframe should now have the columns `Date`, `chla_mgm3`, `TN_gm3`, `TP_gm3`, and `secchi_m.`\n\nThe next thing we need to do in order to run the correlation analysis is to remove the `Date` column. We aren't interested in how date is correlated with chl-a, TN, TP, or secchi (for this analysis!). Just how they are correlated with each other.\n\n------------------------------------------------------------------------\n\n***Challenge 3:*** *Use the `select` function to remove the Date column. Make this a new dataframe called `okaro_corr`.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nokaro_corr <- okaro_wide %>% \n  select(-Date) \n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow we have to make sure there are no NA's in the data frame, and format it as a matrix. This is simply because the function which runs the correlation analysis, `rcorr`, is picky, so we have to make it happy :) `rcorr` requires the format of the input to be a matrix, which is a two-dimensional data structure that organizes elements into rows and columns. This is slightly different from a dataframe, which is what we usually use, in that each element in a matrix must be of the same data type, making it a homogenous structure.\n\n```{r message=FALSE,tidy=TRUE}\nokaro_corr <- na.omit(okaro_corr)\n# note that the function complete.cases() also will do the same trick here\nokaro_corr <- as.matrix(okaro_corr)\n\n```\n\nNow let's run the correlation analysis using the `rcorr` function. The default type of analysis is Pearson, which assumes normality. Here, we will specify Spearman because our data are not all normally distributed (as we learned in our histogram plot earlier).\n\n```{r message=FALSE,tidy=TRUE}\n\nokaro_corr_out <- rcorr(okaro_corr, type = 'spearman') \nprint(okaro_corr_out)\n```\n\nLet's look at that output! The first table is the correlation coefficients (r) and the second is the p-values.\n\n```{r message=FALSE,tidy=TRUE}\n\np_mat <- okaro_corr_out$P # this is the matrix of p_values\ndiag(p_mat) <- 1 # because there are no p-values on the diagonals, we have to insert 1 here for the plot to work\ncorrplot(okaro_corr_out$r, type = 'upper',\n         sig.level = 0.05,\n         diag = FALSE,\n         insig = 'blank', p.mat = p_mat)\n\n\n```\n\nThere are lots of ways to cusotmize these plots. You can check them out by googling `corrplot` and seeing what others have done and running `?corrplot` in the console to see what some of the different arguments do. Let's say we want to actually see what the correlation coefficients are on the plot.\n\n------------------------------------------------------------------------\n\n***Challenge 4:*** *Remake the plot but add the argument `addCoef.col = \"black\"` to display the p-values within each circle.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE}\ncorrplot(okaro_corr_out$r, \n         type = 'upper',\n         sig.level = 0.05, \n         addCoef.col = \"black\",\n         diag = FALSE,\n         insig = 'blank', \n         p.mat = p_mat)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n***Challenge 3:*** *Repeat the correlation analysis for Lake Tarawera. How do the correlations compare between the two lakes? Remember, you need to first subset the `wq` dataframe for Lake Tarawera, then `pivot_wider` so your columns are your variables, `rename` your columns to get rid of symbols and spaces, remove the `Date` column and any NA's, then run your correlation using `rcorr`, and then plot your output using `corrplot`!*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE}\nwq_tara <- wq %>% \n  filter(LocationName=='Lake Tarawera at Site 5 (Integrated)') %>% \n  select(Time, Value, Parameter, Unit)\n\ntara_wide <- wq_tara %>% \n  mutate(Date = as.Date(Time)) %>% # keeping these lines in our workflow to remove Time and Unit\n  select(-Time, -Unit) %>% \n  group_by(Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\ntara_wide <- tara_wide %>% \n  rename('chla_mgm3' = \"CHLA (mg/m^3)\",\n         'TN_gm3' = \"TN (g/m^3)\",\n         \"TP_gm3\" = \"TP (g/m^3)\",\n         \"secchi_m\" = \"VC - SD (m)\") %>% \n ungroup() %>% \n select(-Date)\n\ntara_corr <- na.omit(tara_wide)\ntara_corr_out <- rcorr(as.matrix(tara_corr), type = 'spearman')\n\np_mat <- tara_corr_out$P # this is the matrix of p_values\ndiag(p_mat) <- 1 # because there are no p-values on the diagonals, we have to insert 1 here for the plot to \ncorrplot(tara_corr_out$r, \n         type = 'upper',\n         diag = FALSE,\n         sig.level = 0.05, \n         insig = 'blank', \n         addCoef.col = 'black',\n         p.mat = p_mat)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nBetween Lakes Okaro and Tarawera, we can now see that there are differences in both the strength of correlations, and in what correlations are significant. For example, in Lake Okaro, all the variables show significant correlations, with the strongest relationship between Secchi depth and chl-a (-0.75). In contrast, in Lake Tarawera, only chl-a and TN; TN and secchi; and chl-a and TN are significantly related, and the relationships are much weaker. There are lots of reasons we can dig into here, but a big driver of these different relationships is likely tied to differences in size, trophic state, and catchment characteristics!\n\n# Linear regression\n\nNext, we will conduct linear regression between two variables which we think are causally related.\n\nBased on our correlation plots above, let's do this for chl-a and TN in Lake Okaro which have a strong, positive correlation. We will go back to our `okaro_wide` dataframe for this, which we created earlier. We will use the function `lm()` to conduct linear regression. Then, we use `summary()` to shows us the results of the model. We can also run `plot(model)` to show the residuals of the model and help check out some diagnostics of the model fit.\n\nTo plot the linear regression output, we will create a plot with TN on the x-axis and chl-a on the y-axis using `geom_point` like we ususally do. however, we will also use the function `geom_smooth(method = 'lm')` which adds a 'smoothed' line corresponding to a linear model (that is what the abbrevation 'lm' means). We will pair this with the function `stat_poly_eq` which allows you to also add the statistical output to the plot. You can customize what information you want to show up (equation, listed as `..eq.label..`, r-squared, listed as `..rr.label..`, etc.)\n\n```{r message=FALSE,tidy=TRUE}\n\nhead(okaro_wide)\n\nmodel <- lm(chla_mgm3 ~ TN_gm3, data = okaro_wide)\nsummary(model)\nplot(model)\n\n\nggplot(okaro_wide, aes(x = TN_gm3, y = chla_mgm3)) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  ylab(expression(Chl*\"-a\"~(mg/m^3)))\n\n```\n\nWell, that was easy! We have our summary statistics and a nice plot with our linear regression. The `summary(model)` shows that both the intercept and slope are significant and our adjusted R-squared is 0.56. However, it's always good to plot some diagnostics of statistical models and make sure that the proper assumptions are being met.\n\nLet's look at our residuals. Remember for a linear regression, our residuals should be normally distributed. We will use the function `shapiro.test` which tests for normality. If the p-value of the Shapiro-Wilk is less than 0.05, that indicates that the variable is *not* normally distributed.\n\n```{r message=FALSE,tidy=TRUE}\n\nresid <- resid(model)\nhist(resid)\n\nshapiro.test(resid)\n\n\n```\n\nUh oh, the Shapiro-Wilk test returns a p-value of \\< 0.05, which means our residuals are not normally distributed and we have violated the assumptions of the linear regression--not good! We can address this by transforming our data to try and achieve a normal distribution of the residuals. Typically, you can try by first transforming the response variable, in our case chl-a.\n\n```{r message=FALSE,tidy=TRUE}\n\nmodel <- lm(log(chla_mgm3) ~ TN_gm3, data = okaro_wide)\nsummary(model)\nplot(model)\n\nresid <- resid(model)\nhist(resid)\n\nshapiro.test(resid)\n\n\n```\n\nViola, that looks much better--our p-value is 0.78 after log-transforming chl-a, which indicates that the residuals are normally distributed and the assumptions of a linear regression have been met. Let's also update our plot with the new model and log transform the y-axis\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(okaro_wide, aes(x = TN_gm3, y = log(chla_mgm3))) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  ylab(expression(Log~Chl*\"-a\"~(mg/m^3)))\n\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 4:*** *Repeat the linear regression analysis, this time between chl-a and secchi depth at Lake Okaro. Make a similar plot with `geom_smooth` and add the equation, R2, and p-value to the plot. Test to see if the residuals are normally distributed and re-adjust your model and plot accordingly.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nhead(okaro_wide)\n\nmodel2 <- lm(log(chla_mgm3) ~ secchi_m, data = okaro_wide)\nsummary(model2)\nplot(model2)\n\nresid2 <- resid(model2)\nhist(resid2)\n\nshapiro.test(resid2)\n\nggplot(okaro_wide, aes(x = secchi_m, y = log(chla_mgm3))) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  xlab('Secchi depth (m)') +\n  ylab(expression(Log~Chl*\"-a\"~(mg/m^3)))\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n# Testing for statistical differences between variables\n\nIn our next example, we are going to test if there is a statistical difference between two sets of data. We often need to do this in ecology and environmental science for a number of reasons. For example, is the community composition at one site different from another?\n\nIn our case, we will test to see if the distribution of a given water quality variable is different between lakes or sites.\n\nLet's test to see if the data collected at Okawa Bay in the shallower western bay of lake Rotoiti, is significantly different from data collected at Site 4 in Lake Rotoiti, in the much deeper eastern bay of the lake. This will tell us something about how spatially heterogeneous Lake Rotoiti is. Let's focus on chl-a dynamics, as this relates to algal blooms and is of direct societal relevance.\n\nFirst, we need to do a little data manipulating to get the data for our two sites in the right format. We will go back to our original `wq` dataset, select the relevant columns, and filter for our two sites.\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_rotoiti <- wq %>% \n  select(Time, LocationName, Value, Parameter, Unit) %>% \n  filter(LocationName %in% c(\"Lake Rotoiti at Okawa Bay (Integrated)\", \"Lake Rotoiti at Site 4 (Integrated)\"))\n\nhead(wq_rotoiti)\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 5:*** *From the `Parameter` column, we need to select just the chl-a data. Filter the new dataset `wq_rotoiti` so that the only Parameter is chla.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nunique(wq_rotoiti$Parameter) # first look at what the values are in this column, then copy the one you need\n\nwq_rotoiti <- wq_rotoiti %>% \n  filter(Parameter==\"CHLA (mg/m^3)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow that we have filtered for our sites and for chl-a, we will `pivot_wider` so our site names are in separate columns. Similar to when we used `pivot_wider` for Okaro and Tarawera above, we first need to create a `Date` column (since the time of sample collection is not relevant here), and remove the `Unit` column.\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_wide <- wq_rotoiti %>%\n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, LocationName, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'LocationName', values_from = 'Value') %>% \n  ungroup()\n  \nhead(rotoiti_wide)\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 6:*** *Ok, our data frame has the columns `Date`, `Parameter`, and one for each site at Rotoiti. We don't actually need the Parameter column anymore, since it's only chl-a, so let's remove that. But, let's rename our site columns to 1) avoid spaces in the column names, and 2) add 'chl-a' into the column name so we don't lose track of what data we are working with. Rename the new columns `OkawaBay_chla` and `Site4_chla`*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_wide <- rotoiti_wide %>% \n  select(-Parameter) %>% \n  rename(OkawaBay_chla = \"Lake Rotoiti at Okawa Bay (Integrated)\",\n         Site4_chla = \"Lake Rotoiti at Site 4 (Integrated)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNext, we need to check if chl-a and TN are normally distributed, which is a requirement for t-tests. You might already have a guess at how this will go based on our `shapiro.test` results from the linear regression, but here, instead of testing the residuals of our model for normality, we are testing the original data.\n\n```{r message=FALSE,tidy=TRUE}\nshapiro.test(rotoiti_wide$OkawaBay_chla)\nshapiro.test(rotoiti_wide$Site4_chla)\n\n```\n\nBoth sites have a very small p-value, which means they fail the Shapiro-Wilks normality test so, if we want to use a t-test we will need to transform them. Log-transformation is one common way to do this, like we did above with chl-a data at Lake Okaro. We will also look at a histogram of the logged values to visually examine normality.\n\n```{r message=FALSE,tidy=TRUE}\n\nshapiro.test(log(rotoiti_wide$OkawaBay_chla))\nshapiro.test(log(rotoiti_wide$Site4_chla))\n\nhist(log(rotoiti_wide$OkawaBay_chla))\nhist(log(rotoiti_wide$Site4_chla))\n\n```\n\nGreat, things are looking pretty \"normal\" after log-transformation, so we are good to go ahead and run a t-test.\n\n***NOTE*** *: there is a package called `bestNormalize` which runs a series of noramlisation tests and allows you to pick the best transformation for your data. This can be a useful tool for figuring out which type of normalization to use (log, sqaure root, etc.), especially if your data do not easily normalize with a log transformation. However, we will not go into details on how to use this package today as a log transformation works well in our case, just want you to be aware of it for future use!*\n\n## T-test\n\nLet's also create a boxplot which will show the distributions of data at each site. We will need to `pivot_longer` again to show the boxplots with the sites on the x-axis, so we will do this in the tidyverse pipe style, without creating a new object.\n\n```{r message=FALSE,tidy=TRUE}\n\nt.test(log(rotoiti_wide$OkawaBay_chla), log(rotoiti_wide$Site4_chla), paired = TRUE)\n\nrotoiti_wide %>% \n  pivot_longer(OkawaBay_chla:Site4_chla, names_to = 'Site', values_to = 'Chla') %>% \n  ggplot(aes(x = Site, y = log(Chla), fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Log Chl-a') +\n  stat_compare_means(method = \"t.test\", label = \"p.format\") \n\n```\n\nThe results of our t-test show that these two sites are significantly different from each other. This isn't too surprising given that Okawa Bay is a much shallower, isolated bay on the western end of Lake Rotoiti, while Site 4 is located in the much deeper main basin. Visually inspecting the boxplots also supports this. Cool!\n\n## Wilcoxon rank sum\n\nNow, let's say we didn't want to log-transform our data. We can use non-parametric statistical tests to look for differences between non-normally distributed datasets. We will use the Wilcoxon rank sum test for this (sometimes called the Mann-Whitney test).\n\nLet's run the test using the `wilcoxon.test` function, and also create our boxplot figure. We will use the argument `paired = TRUE` in our Wilcoxon test because these samples were taken at roughly the same time and are expected to be representative of similar conditions at both sites.\n\n```{r message=FALSE,tidy=TRUE}\n\nwilcox.test(rotoiti_wide$OkawaBay_chla, rotoiti_wide$Site4_chla, paired = TRUE)\n\nrotoiti_wide %>% \n  pivot_longer(OkawaBay_chla:Site4_chla, names_to = 'Site', values_to = 'Chla') %>% \n  ggplot(aes(x = Site, y = Chla, fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n```\n\nWith the Wilcoxon rank sum test on our raw data, we also show that there is a statistical difference between these two sites. Pretty cool to see that two locations within the same lake are significantly different from each!\n\n\\_\\_\n\n***Challenge 7:*** *Run either a t-test or a Wilcoxon rank sum test to test if there is a significant difference between Lake Rotoiti at Site 4 and Lake Rotorua at Site 5. You can choose whichever water quality variable you'd like to look at. Remember, you will need to start with the `wq` dataframe, select the relevant columns, filter LocationName and Parameter. Then you will pivot_wider (don't forget to make a Date column and remove Unit), rename your columns, and run your statistical test plus a plot! HINT: Samples are not collected on the same date between Rotorua and Rotoiti, so you will need to format your dates as Month-Year (e.g., Jan-2021). You can do this using this line of code within your tidyverse pipe: `mutate(Date = format(as.Date(Time), format = '%b-%Y'))`*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_rotorua <- wq %>% \n  select(Time, LocationName, Value, Parameter, Unit) %>% \n  filter(LocationName %in% c(\"Lake Rotorua at Site 5 (Integrated)\", \n                             \"Lake Rotoiti at Site 4 (Integrated)\"),\n         Parameter==\"TP (g/m^3)\") \n\nrotoiti_rotorua_wide <- rotoiti_rotorua %>%\n  mutate(Date = format(as.Date(Time), format = '%b-%Y')) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, LocationName, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'LocationName', values_from = 'Value') %>% \n  ungroup()\n\nrotoiti_rotorua_wide <- rotoiti_rotorua_wide %>% \n  select(-Parameter) %>% \n  rename(Rotoiti_TP = \"Lake Rotoiti at Site 4 (Integrated)\",\n         Rotorua_TP = \"Lake Rotorua at Site 5 (Integrated)\")\n\n## if running a t-test\nt.test(log(rotoiti_rotorua_wide$Rotoiti_TP), log(rotoiti_rotorua_wide$Rotorua_TP))\n\nrotoiti_rotorua_wide %>% \n  pivot_longer(Rotoiti_TP:Rotorua_TP, names_to = 'Site', values_to = 'TP') %>% \n  ggplot(aes(x = Site, y = log(TP), fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n## if running a wilcoxon test  \nwilcox.test(rotoiti_rotorua_wide$Rotoiti_TP, rotoiti_rotorua_wide$Rotorua_TP)\n\nrotoiti_rotorua_wide %>% \n  pivot_longer(Rotoiti_TP:Rotorua_TP, names_to = 'Site', values_to = 'TP') %>% \n  ggplot(aes(x = Site, y = TP, fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n## ANOVA\n\nWhat if we have more than two variables we want to test for differences across? This is where the ANOVA, or ANalysis Of VAriance comes in. An ANOVA assumes that your response variable is normally distributed and you are comparing differences across *categorical* predictors.\n\nIn this example, we will use an ANOVA to test for differences in secchi depth across season in Lake Okaro.\n\nWe will go back to our `wq_okaro` dataset. First, we need to filter to just secchi depth data and clean a few things up. Then, we test to see if secchi depth is normally distributed, and if not, we will transform it!\n\n```{r message=FALSE,tidy=TRUE}\n\nhead(wq_okaro)\n\nsecchi_okaro <- wq_okaro %>% \n  filter(Parameter==\"VC - SD (m)\") %>% \n  select(-Unit, -Parameter) %>% \n  rename('secchi_m' = Value)\n\nhist(secchi_okaro$secchi_m)\nshapiro.test(secchi_okaro$secchi_m)\n\n```\n\nLooks like Secchi is not normally distributed, so we will create a new log-transformed column and run the shapiro test again to check.\n\n```{r message=FALSE,tidy=TRUE}\n\nsecchi_okaro <- secchi_okaro %>% \n  mutate(log_secchi_m = log(secchi_m))\n\nhist(secchi_okaro$log_secchi_m)\nshapiro.test(secchi_okaro$log_secchi_m)\n\n```\n\nP-value is greater than 0.05, so that looks better. We will run our ANOVA on log_secchi_m.\n\nNext, we need to create out `seasons` column, which is the variable by which we want to test if there are differences in Secchi depth. We first create a `month` column, and then create the `season` column, which is based on the month. I'll do this first for 'Summer'.\n\n```{r message=FALSE,tidy=TRUE}\n\nsecchi_okaro <- secchi_okaro %>% \n  mutate(month = month(Time)) %>% \n  mutate(season = case_when(month %in% c(12, 1, 2) ~ 'Summer'))\n\n```\n\n\\_\\_\n\n***Challenge 8:*** *Now, finish creating the `season` column using `case_when` for \"Autumn\", \"Winter\" and \"Spring\". You will need to add `TRUE ~ season` as the last argument so that the values we set for Summer in the previous chunk of code remain (i.e., you're not writing over your `summer` values you just did).*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nsecchi_okaro <- secchi_okaro %>% \n  mutate(season = case_when(month %in% c(3, 4, 5) ~ \"Autumn\",\n                            month %in% c(6, 7, 8) ~ \"Winter\",\n                            month %in% c(9, 10, 11) ~ \"Spring\",\n                            TRUE ~ season))\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow that we have our `season` column, let's make a boxplot of the data by season to see if there are any obvious patterns. We will order the season as a factor first to make sure it plots in an order that makes sense.\n\n```{r message=FALSE,tidy=TRUE}\nsecchi_okaro$season <- factor(secchi_okaro$season, \n                              levels = c('Spring',\n                                         'Summer',\n                                         'Autumn',\n                                         'Winter'))\n\nggplot(secchi_okaro, aes(x= season, y = secchi_m)) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Secchi depth (m)')\n```\n\nOk, there are some clear differences between the seasons here. I have a feeling this ANOVA is gonna be interesting...We will use the function `aov` to run the ANOVA on the log-transformed column and `summary` to look at the results.\n\n```{r message=FALSE,tidy=TRUE}\n\nanova_secchi_okaro <- aov(log_secchi_m ~ season, data = secchi_okaro)\nsummary(anova_secchi_okaro)\n\n```\n\nThe Pr(\\>F) is very small, which tells us that there is a significant differences between seasons for Secchi depth.\n\nOne last thing we can check is which seasons are different from each other. We can run a `Tukey` test to see this.\n\n```{r message=FALSE,tidy=TRUE}\n\ntukey_result <- TukeyHSD(anova_secchi_okaro, conf.level = 0.95)\nprint(tukey_result)\n\nggplot(secchi_okaro, aes(x= season, y = log(secchi_m))) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Secchi depth (m)')\n\n```\n\nLooking at the p-adj column, we can see which seasons have statistically significant differences. Let's use a p-value cutoff of p \\< 0.05 is considered significant. Here, we can see that winter-spring, autumn-summer, and winter-summer are not statistically different from each other. If we look back at our boxplots, this looks like a reasonable result given the differences between distributions of those seasons.\n\n*Nice job! You've made it to the end of this statistical lesson. If you still have time, you can try running an ANOVA across seasons in another lake. Come to us with any questions!*\n","srcMarkdownNoYaml":"\n\n# Overview\n\nThis lesson is designed to provide you with experience in running statistical analyses in R. We will use water quality data as an example, but these analyses can be applied to many other datasets, provided the statistical assumptions are met. We will cover the following topics:\n\n-   Correlation analyses (Pearson and Spearman) and plots\n-   Linear regression and plots\n-   T-tests and Wilcoxon rank sum test (aka Mann-Whitney)\n-   ANOVA\n\n::: callout-note\n**Disclaimer**\n\nThis lesson teaches the implementation of multiple statistical analyses, rather than the background behind why, when, and what to check when choosing a statistical analysis. You should always check the underlying assumptions of an analysis and whether your data meet those assumptions.\n:::\n\nWe are adding a few new packages today which perform specialized functions for statistical analyses. You don't need to worry about the new packages too much, other than you will need to install and load the libraries.\n\nThe main packages that we will use in this tutorial are:\n\n-   **tidyverse**\n-   **lubridate**\n-   **Hmisc**\n-   **corrplot**\n-   **ggpmisc**\n-   **ggpubr**\n\nBefore attempting to install these packages, make sure your Primary CRAN Repository is set to:\n\n-   **\"New Zealand \\[https\\] - University of Auckland\"**\n\nTo check this, click 'Tools' --\\> 'Global Options' --\\> 'Packages'. Click 'Change' if you need to adjust this.\n\nYou can download most packages by clicking on the 'Install' button on the 'packages' tab in the lower right window pane. Then in the Install Packages popup, select ‘Repository (CRAN)’ from the ‘Install from’ drop box and type the name of the package you wish to download (e.g., dplyr).\n\nOnce all of these packages are installed you can load them using the `library` function:\n\n```{r, message=FALSE}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(Hmisc)\nlibrary(corrplot)\nlibrary(ggpmisc)\nlibrary(ggpubr)\n```\n\nFirst we will load in our data. We will use the same water quality data from Lesson 3. This data has been downloaded from Aquarius using the R script which you can find at `scripts/download_data_aquarius.R` if you'd like to see how the data were downloaded. For today, we are skipping that step and reading in directly from a .csv file which was written after the Aquarius download.\n\n```{r, message=FALSE}\nwq <- read.csv('./data/Lake_WQ_Timeseries.csv')\n```\n\nNow, look at the `wq` dataframe by clicking on it in the environment and familiarise yourself with the columns. You can also run the function `colnames(wq)` in the console to get a list of column names. It's better to run this in the console (rather than in your script editor), since it is a diagnostic test and not something you will necessary need to run every time you open your script--just as needed.\n\n```{r, message=FALSE}\ncolnames(wq) # you don't have to save this in your script, but can copy it into the console\n```\n\nAs we know from previous lessons, it is always best practice is to format date/time objects with the appropriate timezone, otherwise R will assume a timezone, and that can lead to the wrong date being set for your timestamp. This is the first thing I do when I see I have a datetime object as a column. Let's use a bit of code that will parse our `Time` column, which includes both a date and a time.\n\nHere, we will use a function called `parse_date_time` which looks at the `Time` column, and then provides a list (using `c()`) of potential formats that the column will be in. Here, we list two formats, the first one has YMD and HMS (hours, minutes, seconds), the second one just has YMD, as some of the values in the `Time` column don't have an associated time next to the date. We pair this with the `mutate` function to re-write our `Time` column.\n\nNOTE: there are many ways to format/parse dates and times in R. This is just one example!\n\n```{r, message=FALSE}\nwq <- wq %>% mutate(Time = parse_date_time(Time,c(\"%Y-%m-%d %H:%M:%S\",\"%Y-%m-%d\"), tz = \"etc/GMT+12\"))\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 1:*** *What locations and parameters are included in this dataset? Use the `unique()` function to find out.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nunique(wq$Parameter)\nunique(wq$LocationName)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nThat helps us get a better understanding of the dataset that we're working with and is something I will do often while working in R to remind myself.\n\nSince we are going to do correlation analysis first, let's focus on just one site and look at the relationships between variables in the `Parameter` column. We will filter the data to only select \"Lake Okaro at Site 1 (Integrated)\" and we will create a new dataframe named `wq_okaro` so we keep all the other lake data in the `wq` dataframe.\n\n```{r, message=FALSE}\nwq_okaro <- wq %>% \n  filter(LocationName=='Lake Okaro at Site 1 (Integrated)')\n```\n\nLet's also clean up the dataframe and only select the columns which are useful to us right now\n\n```{r, message=FALSE}\nwq_okaro <- wq_okaro %>% \n  select(Time, Value, Parameter, Unit)\n```\n\nLet's plot the data to make sure everything looks good. I like to do a `geom_point` plot, as well as a histogram, using `geom_histogram`\n\n```{r, message=FALSE}\nggplot(wq_okaro, aes(x = as.POSIXct(Time), y = Value, color = Parameter)) +\n  geom_point() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw() +\n  xlab('Time')\n\nggplot(wq_okaro, aes(x = Value, fill = Parameter)) +\n  geom_histogram() +\n  facet_wrap(~Parameter, scales = 'free') +\n  theme_bw()\n\n\n```\n\nAlright, we have a time series of four variables. There are many things we can do to analyse this data. Let's start with a correlation analysis.\n\n# Correlation analysis and plots\n\nA correlation analysis is used to assess the magnitude and direction of the relationship between two variables. It does not necessarily imply casuation, but shows you how two variables change together.\n\nWe will use the function `rcorr` and `corrplot` to create and visualize our correlation analysis. In order to conduct a correlation analysis, we need to do some formatting/rearranging. First, we need to make the data wide, but we also have to create a `Date` column which doesn't include the time so that it is common across the variables. We will also remove the `Unit` column for this reason (and we don't need that column for this anyway since the units are stored in the Parameter names)\n\n```{r, message=FALSE}\nokaro_wide <- wq_okaro %>% \n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value') %>% \n  ungroup()\n\n```\n\nOpen up your new `okaro_wide` data and check it out. Those column names have gaps and symbols in them, which might cause us problems later. Let's rename the columns using the function `rename`. I'll show you one example\n\n```{r, message=FALSE}\nokaro_wide <- okaro_wide %>% \n  rename('chla_mgm3' = \"CHLA (mg/m^3)\") # the format is new name = old name\n```\n\n------------------------------------------------------------------------\n\n***Challenge 2:*** *Rename the remaining variable columns to TN_gm3, TP_gm3, and secchi_m.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nokaro_wide <- okaro_wide %>% \n  rename('TN_gm3' = \"TN (g/m^3)\",\n         \"TP_gm3\" = \"TP (g/m^3)\",\n         \"secchi_m\" = \"VC - SD (m)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nGreat, your `okaro_wide` dataframe should now have the columns `Date`, `chla_mgm3`, `TN_gm3`, `TP_gm3`, and `secchi_m.`\n\nThe next thing we need to do in order to run the correlation analysis is to remove the `Date` column. We aren't interested in how date is correlated with chl-a, TN, TP, or secchi (for this analysis!). Just how they are correlated with each other.\n\n------------------------------------------------------------------------\n\n***Challenge 3:*** *Use the `select` function to remove the Date column. Make this a new dataframe called `okaro_corr`.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nokaro_corr <- okaro_wide %>% \n  select(-Date) \n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow we have to make sure there are no NA's in the data frame, and format it as a matrix. This is simply because the function which runs the correlation analysis, `rcorr`, is picky, so we have to make it happy :) `rcorr` requires the format of the input to be a matrix, which is a two-dimensional data structure that organizes elements into rows and columns. This is slightly different from a dataframe, which is what we usually use, in that each element in a matrix must be of the same data type, making it a homogenous structure.\n\n```{r message=FALSE,tidy=TRUE}\nokaro_corr <- na.omit(okaro_corr)\n# note that the function complete.cases() also will do the same trick here\nokaro_corr <- as.matrix(okaro_corr)\n\n```\n\nNow let's run the correlation analysis using the `rcorr` function. The default type of analysis is Pearson, which assumes normality. Here, we will specify Spearman because our data are not all normally distributed (as we learned in our histogram plot earlier).\n\n```{r message=FALSE,tidy=TRUE}\n\nokaro_corr_out <- rcorr(okaro_corr, type = 'spearman') \nprint(okaro_corr_out)\n```\n\nLet's look at that output! The first table is the correlation coefficients (r) and the second is the p-values.\n\n```{r message=FALSE,tidy=TRUE}\n\np_mat <- okaro_corr_out$P # this is the matrix of p_values\ndiag(p_mat) <- 1 # because there are no p-values on the diagonals, we have to insert 1 here for the plot to work\ncorrplot(okaro_corr_out$r, type = 'upper',\n         sig.level = 0.05,\n         diag = FALSE,\n         insig = 'blank', p.mat = p_mat)\n\n\n```\n\nThere are lots of ways to cusotmize these plots. You can check them out by googling `corrplot` and seeing what others have done and running `?corrplot` in the console to see what some of the different arguments do. Let's say we want to actually see what the correlation coefficients are on the plot.\n\n------------------------------------------------------------------------\n\n***Challenge 4:*** *Remake the plot but add the argument `addCoef.col = \"black\"` to display the p-values within each circle.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE}\ncorrplot(okaro_corr_out$r, \n         type = 'upper',\n         sig.level = 0.05, \n         addCoef.col = \"black\",\n         diag = FALSE,\n         insig = 'blank', \n         p.mat = p_mat)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n***Challenge 3:*** *Repeat the correlation analysis for Lake Tarawera. How do the correlations compare between the two lakes? Remember, you need to first subset the `wq` dataframe for Lake Tarawera, then `pivot_wider` so your columns are your variables, `rename` your columns to get rid of symbols and spaces, remove the `Date` column and any NA's, then run your correlation using `rcorr`, and then plot your output using `corrplot`!*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE}\nwq_tara <- wq %>% \n  filter(LocationName=='Lake Tarawera at Site 5 (Integrated)') %>% \n  select(Time, Value, Parameter, Unit)\n\ntara_wide <- wq_tara %>% \n  mutate(Date = as.Date(Time)) %>% # keeping these lines in our workflow to remove Time and Unit\n  select(-Time, -Unit) %>% \n  group_by(Date, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'Parameter', values_from = 'Value')\n\ntara_wide <- tara_wide %>% \n  rename('chla_mgm3' = \"CHLA (mg/m^3)\",\n         'TN_gm3' = \"TN (g/m^3)\",\n         \"TP_gm3\" = \"TP (g/m^3)\",\n         \"secchi_m\" = \"VC - SD (m)\") %>% \n ungroup() %>% \n select(-Date)\n\ntara_corr <- na.omit(tara_wide)\ntara_corr_out <- rcorr(as.matrix(tara_corr), type = 'spearman')\n\np_mat <- tara_corr_out$P # this is the matrix of p_values\ndiag(p_mat) <- 1 # because there are no p-values on the diagonals, we have to insert 1 here for the plot to \ncorrplot(tara_corr_out$r, \n         type = 'upper',\n         diag = FALSE,\n         sig.level = 0.05, \n         insig = 'blank', \n         addCoef.col = 'black',\n         p.mat = p_mat)\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nBetween Lakes Okaro and Tarawera, we can now see that there are differences in both the strength of correlations, and in what correlations are significant. For example, in Lake Okaro, all the variables show significant correlations, with the strongest relationship between Secchi depth and chl-a (-0.75). In contrast, in Lake Tarawera, only chl-a and TN; TN and secchi; and chl-a and TN are significantly related, and the relationships are much weaker. There are lots of reasons we can dig into here, but a big driver of these different relationships is likely tied to differences in size, trophic state, and catchment characteristics!\n\n# Linear regression\n\nNext, we will conduct linear regression between two variables which we think are causally related.\n\nBased on our correlation plots above, let's do this for chl-a and TN in Lake Okaro which have a strong, positive correlation. We will go back to our `okaro_wide` dataframe for this, which we created earlier. We will use the function `lm()` to conduct linear regression. Then, we use `summary()` to shows us the results of the model. We can also run `plot(model)` to show the residuals of the model and help check out some diagnostics of the model fit.\n\nTo plot the linear regression output, we will create a plot with TN on the x-axis and chl-a on the y-axis using `geom_point` like we ususally do. however, we will also use the function `geom_smooth(method = 'lm')` which adds a 'smoothed' line corresponding to a linear model (that is what the abbrevation 'lm' means). We will pair this with the function `stat_poly_eq` which allows you to also add the statistical output to the plot. You can customize what information you want to show up (equation, listed as `..eq.label..`, r-squared, listed as `..rr.label..`, etc.)\n\n```{r message=FALSE,tidy=TRUE}\n\nhead(okaro_wide)\n\nmodel <- lm(chla_mgm3 ~ TN_gm3, data = okaro_wide)\nsummary(model)\nplot(model)\n\n\nggplot(okaro_wide, aes(x = TN_gm3, y = chla_mgm3)) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  ylab(expression(Chl*\"-a\"~(mg/m^3)))\n\n```\n\nWell, that was easy! We have our summary statistics and a nice plot with our linear regression. The `summary(model)` shows that both the intercept and slope are significant and our adjusted R-squared is 0.56. However, it's always good to plot some diagnostics of statistical models and make sure that the proper assumptions are being met.\n\nLet's look at our residuals. Remember for a linear regression, our residuals should be normally distributed. We will use the function `shapiro.test` which tests for normality. If the p-value of the Shapiro-Wilk is less than 0.05, that indicates that the variable is *not* normally distributed.\n\n```{r message=FALSE,tidy=TRUE}\n\nresid <- resid(model)\nhist(resid)\n\nshapiro.test(resid)\n\n\n```\n\nUh oh, the Shapiro-Wilk test returns a p-value of \\< 0.05, which means our residuals are not normally distributed and we have violated the assumptions of the linear regression--not good! We can address this by transforming our data to try and achieve a normal distribution of the residuals. Typically, you can try by first transforming the response variable, in our case chl-a.\n\n```{r message=FALSE,tidy=TRUE}\n\nmodel <- lm(log(chla_mgm3) ~ TN_gm3, data = okaro_wide)\nsummary(model)\nplot(model)\n\nresid <- resid(model)\nhist(resid)\n\nshapiro.test(resid)\n\n\n```\n\nViola, that looks much better--our p-value is 0.78 after log-transforming chl-a, which indicates that the residuals are normally distributed and the assumptions of a linear regression have been met. Let's also update our plot with the new model and log transform the y-axis\n\n```{r message=FALSE,tidy=TRUE}\n\nggplot(okaro_wide, aes(x = TN_gm3, y = log(chla_mgm3))) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  ylab(expression(Log~Chl*\"-a\"~(mg/m^3)))\n\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 4:*** *Repeat the linear regression analysis, this time between chl-a and secchi depth at Lake Okaro. Make a similar plot with `geom_smooth` and add the equation, R2, and p-value to the plot. Test to see if the residuals are normally distributed and re-adjust your model and plot accordingly.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nhead(okaro_wide)\n\nmodel2 <- lm(log(chla_mgm3) ~ secchi_m, data = okaro_wide)\nsummary(model2)\nplot(model2)\n\nresid2 <- resid(model2)\nhist(resid2)\n\nshapiro.test(resid2)\n\nggplot(okaro_wide, aes(x = secchi_m, y = log(chla_mgm3))) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = TRUE) +\n  theme_bw() +\n   stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., ..p.value.label.., sep = \"~~~\"))) +\n  theme_bw() +\n  xlab('Secchi depth (m)') +\n  ylab(expression(Log~Chl*\"-a\"~(mg/m^3)))\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n# Testing for statistical differences between variables\n\nIn our next example, we are going to test if there is a statistical difference between two sets of data. We often need to do this in ecology and environmental science for a number of reasons. For example, is the community composition at one site different from another?\n\nIn our case, we will test to see if the distribution of a given water quality variable is different between lakes or sites.\n\nLet's test to see if the data collected at Okawa Bay in the shallower western bay of lake Rotoiti, is significantly different from data collected at Site 4 in Lake Rotoiti, in the much deeper eastern bay of the lake. This will tell us something about how spatially heterogeneous Lake Rotoiti is. Let's focus on chl-a dynamics, as this relates to algal blooms and is of direct societal relevance.\n\nFirst, we need to do a little data manipulating to get the data for our two sites in the right format. We will go back to our original `wq` dataset, select the relevant columns, and filter for our two sites.\n\n```{r message=FALSE,tidy=TRUE}\n\nwq_rotoiti <- wq %>% \n  select(Time, LocationName, Value, Parameter, Unit) %>% \n  filter(LocationName %in% c(\"Lake Rotoiti at Okawa Bay (Integrated)\", \"Lake Rotoiti at Site 4 (Integrated)\"))\n\nhead(wq_rotoiti)\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 5:*** *From the `Parameter` column, we need to select just the chl-a data. Filter the new dataset `wq_rotoiti` so that the only Parameter is chla.*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nunique(wq_rotoiti$Parameter) # first look at what the values are in this column, then copy the one you need\n\nwq_rotoiti <- wq_rotoiti %>% \n  filter(Parameter==\"CHLA (mg/m^3)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow that we have filtered for our sites and for chl-a, we will `pivot_wider` so our site names are in separate columns. Similar to when we used `pivot_wider` for Okaro and Tarawera above, we first need to create a `Date` column (since the time of sample collection is not relevant here), and remove the `Unit` column.\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_wide <- wq_rotoiti %>%\n  mutate(Date = as.Date(Time)) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, LocationName, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'LocationName', values_from = 'Value') %>% \n  ungroup()\n  \nhead(rotoiti_wide)\n\n```\n\n------------------------------------------------------------------------\n\n***Challenge 6:*** *Ok, our data frame has the columns `Date`, `Parameter`, and one for each site at Rotoiti. We don't actually need the Parameter column anymore, since it's only chl-a, so let's remove that. But, let's rename our site columns to 1) avoid spaces in the column names, and 2) add 'chl-a' into the column name so we don't lose track of what data we are working with. Rename the new columns `OkawaBay_chla` and `Site4_chla`*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_wide <- rotoiti_wide %>% \n  select(-Parameter) %>% \n  rename(OkawaBay_chla = \"Lake Rotoiti at Okawa Bay (Integrated)\",\n         Site4_chla = \"Lake Rotoiti at Site 4 (Integrated)\")\n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNext, we need to check if chl-a and TN are normally distributed, which is a requirement for t-tests. You might already have a guess at how this will go based on our `shapiro.test` results from the linear regression, but here, instead of testing the residuals of our model for normality, we are testing the original data.\n\n```{r message=FALSE,tidy=TRUE}\nshapiro.test(rotoiti_wide$OkawaBay_chla)\nshapiro.test(rotoiti_wide$Site4_chla)\n\n```\n\nBoth sites have a very small p-value, which means they fail the Shapiro-Wilks normality test so, if we want to use a t-test we will need to transform them. Log-transformation is one common way to do this, like we did above with chl-a data at Lake Okaro. We will also look at a histogram of the logged values to visually examine normality.\n\n```{r message=FALSE,tidy=TRUE}\n\nshapiro.test(log(rotoiti_wide$OkawaBay_chla))\nshapiro.test(log(rotoiti_wide$Site4_chla))\n\nhist(log(rotoiti_wide$OkawaBay_chla))\nhist(log(rotoiti_wide$Site4_chla))\n\n```\n\nGreat, things are looking pretty \"normal\" after log-transformation, so we are good to go ahead and run a t-test.\n\n***NOTE*** *: there is a package called `bestNormalize` which runs a series of noramlisation tests and allows you to pick the best transformation for your data. This can be a useful tool for figuring out which type of normalization to use (log, sqaure root, etc.), especially if your data do not easily normalize with a log transformation. However, we will not go into details on how to use this package today as a log transformation works well in our case, just want you to be aware of it for future use!*\n\n## T-test\n\nLet's also create a boxplot which will show the distributions of data at each site. We will need to `pivot_longer` again to show the boxplots with the sites on the x-axis, so we will do this in the tidyverse pipe style, without creating a new object.\n\n```{r message=FALSE,tidy=TRUE}\n\nt.test(log(rotoiti_wide$OkawaBay_chla), log(rotoiti_wide$Site4_chla), paired = TRUE)\n\nrotoiti_wide %>% \n  pivot_longer(OkawaBay_chla:Site4_chla, names_to = 'Site', values_to = 'Chla') %>% \n  ggplot(aes(x = Site, y = log(Chla), fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Log Chl-a') +\n  stat_compare_means(method = \"t.test\", label = \"p.format\") \n\n```\n\nThe results of our t-test show that these two sites are significantly different from each other. This isn't too surprising given that Okawa Bay is a much shallower, isolated bay on the western end of Lake Rotoiti, while Site 4 is located in the much deeper main basin. Visually inspecting the boxplots also supports this. Cool!\n\n## Wilcoxon rank sum\n\nNow, let's say we didn't want to log-transform our data. We can use non-parametric statistical tests to look for differences between non-normally distributed datasets. We will use the Wilcoxon rank sum test for this (sometimes called the Mann-Whitney test).\n\nLet's run the test using the `wilcoxon.test` function, and also create our boxplot figure. We will use the argument `paired = TRUE` in our Wilcoxon test because these samples were taken at roughly the same time and are expected to be representative of similar conditions at both sites.\n\n```{r message=FALSE,tidy=TRUE}\n\nwilcox.test(rotoiti_wide$OkawaBay_chla, rotoiti_wide$Site4_chla, paired = TRUE)\n\nrotoiti_wide %>% \n  pivot_longer(OkawaBay_chla:Site4_chla, names_to = 'Site', values_to = 'Chla') %>% \n  ggplot(aes(x = Site, y = Chla, fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n```\n\nWith the Wilcoxon rank sum test on our raw data, we also show that there is a statistical difference between these two sites. Pretty cool to see that two locations within the same lake are significantly different from each!\n\n\\_\\_\n\n***Challenge 7:*** *Run either a t-test or a Wilcoxon rank sum test to test if there is a significant difference between Lake Rotoiti at Site 4 and Lake Rotorua at Site 5. You can choose whichever water quality variable you'd like to look at. Remember, you will need to start with the `wq` dataframe, select the relevant columns, filter LocationName and Parameter. Then you will pivot_wider (don't forget to make a Date column and remove Unit), rename your columns, and run your statistical test plus a plot! HINT: Samples are not collected on the same date between Rotorua and Rotoiti, so you will need to format your dates as Month-Year (e.g., Jan-2021). You can do this using this line of code within your tidyverse pipe: `mutate(Date = format(as.Date(Time), format = '%b-%Y'))`*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\n\nrotoiti_rotorua <- wq %>% \n  select(Time, LocationName, Value, Parameter, Unit) %>% \n  filter(LocationName %in% c(\"Lake Rotorua at Site 5 (Integrated)\", \n                             \"Lake Rotoiti at Site 4 (Integrated)\"),\n         Parameter==\"TP (g/m^3)\") \n\nrotoiti_rotorua_wide <- rotoiti_rotorua %>%\n  mutate(Date = format(as.Date(Time), format = '%b-%Y')) %>% \n  select(-Time, -Unit) %>% \n  group_by(Date, LocationName, Parameter) %>% \n  summarise(Value = mean(Value, na.rm = TRUE)) %>% \n  pivot_wider(names_from = 'LocationName', values_from = 'Value') %>% \n  ungroup()\n\nrotoiti_rotorua_wide <- rotoiti_rotorua_wide %>% \n  select(-Parameter) %>% \n  rename(Rotoiti_TP = \"Lake Rotoiti at Site 4 (Integrated)\",\n         Rotorua_TP = \"Lake Rotorua at Site 5 (Integrated)\")\n\n## if running a t-test\nt.test(log(rotoiti_rotorua_wide$Rotoiti_TP), log(rotoiti_rotorua_wide$Rotorua_TP))\n\nrotoiti_rotorua_wide %>% \n  pivot_longer(Rotoiti_TP:Rotorua_TP, names_to = 'Site', values_to = 'TP') %>% \n  ggplot(aes(x = Site, y = log(TP), fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n## if running a wilcoxon test  \nwilcox.test(rotoiti_rotorua_wide$Rotoiti_TP, rotoiti_rotorua_wide$Rotorua_TP)\n\nrotoiti_rotorua_wide %>% \n  pivot_longer(Rotoiti_TP:Rotorua_TP, names_to = 'Site', values_to = 'TP') %>% \n  ggplot(aes(x = Site, y = TP, fill = Site)) +\n  geom_boxplot() +\n  theme_bw() +\n  stat_compare_means(method = \"wilcox.test\", label = \"p.format\") \n\n```\n\n</details>\n\n------------------------------------------------------------------------\n\n## ANOVA\n\nWhat if we have more than two variables we want to test for differences across? This is where the ANOVA, or ANalysis Of VAriance comes in. An ANOVA assumes that your response variable is normally distributed and you are comparing differences across *categorical* predictors.\n\nIn this example, we will use an ANOVA to test for differences in secchi depth across season in Lake Okaro.\n\nWe will go back to our `wq_okaro` dataset. First, we need to filter to just secchi depth data and clean a few things up. Then, we test to see if secchi depth is normally distributed, and if not, we will transform it!\n\n```{r message=FALSE,tidy=TRUE}\n\nhead(wq_okaro)\n\nsecchi_okaro <- wq_okaro %>% \n  filter(Parameter==\"VC - SD (m)\") %>% \n  select(-Unit, -Parameter) %>% \n  rename('secchi_m' = Value)\n\nhist(secchi_okaro$secchi_m)\nshapiro.test(secchi_okaro$secchi_m)\n\n```\n\nLooks like Secchi is not normally distributed, so we will create a new log-transformed column and run the shapiro test again to check.\n\n```{r message=FALSE,tidy=TRUE}\n\nsecchi_okaro <- secchi_okaro %>% \n  mutate(log_secchi_m = log(secchi_m))\n\nhist(secchi_okaro$log_secchi_m)\nshapiro.test(secchi_okaro$log_secchi_m)\n\n```\n\nP-value is greater than 0.05, so that looks better. We will run our ANOVA on log_secchi_m.\n\nNext, we need to create out `seasons` column, which is the variable by which we want to test if there are differences in Secchi depth. We first create a `month` column, and then create the `season` column, which is based on the month. I'll do this first for 'Summer'.\n\n```{r message=FALSE,tidy=TRUE}\n\nsecchi_okaro <- secchi_okaro %>% \n  mutate(month = month(Time)) %>% \n  mutate(season = case_when(month %in% c(12, 1, 2) ~ 'Summer'))\n\n```\n\n\\_\\_\n\n***Challenge 8:*** *Now, finish creating the `season` column using `case_when` for \"Autumn\", \"Winter\" and \"Spring\". You will need to add `TRUE ~ season` as the last argument so that the values we set for Summer in the previous chunk of code remain (i.e., you're not writing over your `summer` values you just did).*\n\n<details>\n\n<summary>Click to see a solution</summary>\n\n```{r message=FALSE,tidy=TRUE}\nsecchi_okaro <- secchi_okaro %>% \n  mutate(season = case_when(month %in% c(3, 4, 5) ~ \"Autumn\",\n                            month %in% c(6, 7, 8) ~ \"Winter\",\n                            month %in% c(9, 10, 11) ~ \"Spring\",\n                            TRUE ~ season))\n```\n\n</details>\n\n------------------------------------------------------------------------\n\nNow that we have our `season` column, let's make a boxplot of the data by season to see if there are any obvious patterns. We will order the season as a factor first to make sure it plots in an order that makes sense.\n\n```{r message=FALSE,tidy=TRUE}\nsecchi_okaro$season <- factor(secchi_okaro$season, \n                              levels = c('Spring',\n                                         'Summer',\n                                         'Autumn',\n                                         'Winter'))\n\nggplot(secchi_okaro, aes(x= season, y = secchi_m)) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Secchi depth (m)')\n```\n\nOk, there are some clear differences between the seasons here. I have a feeling this ANOVA is gonna be interesting...We will use the function `aov` to run the ANOVA on the log-transformed column and `summary` to look at the results.\n\n```{r message=FALSE,tidy=TRUE}\n\nanova_secchi_okaro <- aov(log_secchi_m ~ season, data = secchi_okaro)\nsummary(anova_secchi_okaro)\n\n```\n\nThe Pr(\\>F) is very small, which tells us that there is a significant differences between seasons for Secchi depth.\n\nOne last thing we can check is which seasons are different from each other. We can run a `Tukey` test to see this.\n\n```{r message=FALSE,tidy=TRUE}\n\ntukey_result <- TukeyHSD(anova_secchi_okaro, conf.level = 0.95)\nprint(tukey_result)\n\nggplot(secchi_okaro, aes(x= season, y = log(secchi_m))) +\n  geom_boxplot() +\n  theme_bw() +\n  ylab('Secchi depth (m)')\n\n```\n\nLooking at the p-adj column, we can see which seasons have statistically significant differences. Let's use a p-value cutoff of p \\< 0.05 is considered significant. Here, we can see that winter-spring, autumn-summer, and winter-summer are not statistically different from each other. If we look back at our boxplots, this looks like a reasonable result given the differences between distributions of those seasons.\n\n*Nice job! You've made it to the end of this statistical lesson. If you still have time, you can try running an ANOVA across seasons in another lake. Come to us with any questions!*\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"number-sections":true,"output-file":"R_Tutorial_5_2025.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","output-dir":"docs","editor":"visual","theme":"sandstone","title":"BOPRC R Tutorial 5 - Statistical Analyses in R","author":"Whitney Woelmer"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}